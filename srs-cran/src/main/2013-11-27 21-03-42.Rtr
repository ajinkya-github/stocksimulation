##------ Nov 27, 2013 9:03:42 PM ------##

R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> cat("welcome to CRAN-R")
welcome to CRAN-R> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: 'zoo'

The following object is masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> library(TTR)
> library(tseries)

    'tseries' version: 0.10-32

    'tseries' is a package for time series analysis and computational
    finance.

    See 'library(help="tseries")' for details.

> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 7.76%
Confusion matrix:
   -6 -5 -4 -3 -2  -1   0   1  2  3 4 5 6 7 10 class.error
-6  0  3  2  0  0   0   0   0  0  0 0 0 0 0  0  1.00000000
-5  0  4  2  3  0   0   0   0  0  0 0 0 0 0  0  0.55555556
-4  2  1  1  5  0   0   0   0  0  0 0 0 0 0  0  0.88888889
-3  0  1  0 24  0   0   0   0  0  0 0 0 0 0  0  0.04000000
-2  0  0  0  0 22  13   0   0  0  0 0 0 0 0  0  0.37142857
-1  0  0  0  0  1 124   0   0  0  0 0 0 0 0  0  0.00800000
0   0  0  0  0  0   0 217   0  0  0 0 0 0 0  0  0.00000000
1   0  0  0  0  0   0   0 137  0  0 0 0 0 0  0  0.00000000
2   0  0  0  0  0   0   0   1 49  0 0 0 0 0  0  0.02000000
3   0  0  0  0  0   0   0   0  0 25 2 0 0 0  0  0.07407407
4   0  0  0  0  0   0   0   0  0  4 3 1 0 1  0  0.66666667
5   0  0  0  0  0   0   0   0  0  2 3 0 0 0  0  1.00000000
6   0  0  0  0  0   0   0   0  0  1 0 0 0 0  0  1.00000000
7   0  0  0  0  0   0   0   0  0  1 1 0 0 0  0  1.00000000
10  0  0  0  0  0   0   0   0  0  0 0 0 1 0  0  1.00000000
                           -6     -5     -4     -3     -2     -1      0      1
ticker.multisma.signals  0.00   0.00   0.00  -3.27  -4.15  -6.27   4.28   6.59
Close.SMA.20            -0.79   6.37  -3.53   9.59   6.37  17.95  32.10  27.07
Close.SMA.50            -0.58   5.06  -9.80  16.75   8.46  16.55  34.33  22.39
ticker.return.signals   35.16  64.59  57.52 138.32  66.05 100.57  89.05  88.63
daily.returns           43.64  71.90  59.83 104.18 156.79 258.40 277.53 267.12
Open                    -5.53   1.27   0.30  14.32   8.71  29.02  44.10  32.02
Close                    4.82   6.08   2.91  19.39  14.60  21.15  43.36  33.89
High                    -3.65   0.66   3.21  13.14   7.11  21.98  33.85  29.02
Low                      1.08   9.19  -1.02  17.06  12.43  26.53  46.72  32.92
Volume                  11.79  41.83  10.87  27.58  32.29   2.45  45.41  26.58
ticker.sma.signals       2.60   4.25  -1.46   7.00   2.23  27.98  24.48  12.46
tdi                      5.44  -2.20  -3.11  -4.60   5.34   4.81  16.64  11.13
di                      11.76   4.30  19.67 -16.25   2.40   7.39  18.97  11.03
ticker.bbands.signals    0.00   0.00   0.00  -1.00   1.00   1.72  -0.01  -2.19
dn                       8.09  -0.33   2.75   6.71   3.78  20.62  34.00  28.12
mavg                    -2.26   9.08  -2.58   9.95   7.03  17.37  32.82  27.21
up                      -8.26   3.07  -0.62  14.57  11.98  11.33  25.46  21.31
pctB                    11.71  28.17   0.05  25.24  22.13  20.37  40.26  37.15
mfi                      6.48 -10.19 -10.12   9.40   5.41  -1.69  28.98  18.81
Close.EMA.14            19.19  21.87   7.73  25.27  26.55  14.52  41.53  40.88
ticker.rsi.signals       4.86  -4.62   3.17   6.67   1.90   2.65   3.04   2.01
                             2      3     4     5 6     7 10
ticker.multisma.signals  -4.21   1.71  0.00  0.00 0  0.00  0
Close.SMA.20              0.19   6.94 13.12 -7.28 0  0.30  0
Close.SMA.50              3.83   1.97  5.74 -4.70 0  0.45  0
ticker.return.signals    68.40 157.70 65.05 24.78 0  5.01  0
daily.returns           173.17 113.54 62.84 27.05 0  5.39  0
Open                      5.08   9.13 13.39 -6.64 0 -4.27  0
Close                     3.04   4.29  9.93 -7.66 0 -6.44  0
High                      1.76   1.24 10.74 -8.37 0 -7.02  0
Low                       4.98   8.58 14.30 -6.51 0 -6.89  0
Volume                   22.42  23.40  4.75  9.05 0  0.73  0
ticker.sma.signals       -1.65   1.85  5.27 -1.34 0  0.00  0
tdi                      -3.67   1.52  5.33 -6.29 0  1.51  0
di                        7.69   2.73 -9.80 -9.75 0 -1.00  0
ticker.bbands.signals    -2.81   0.00  0.00  0.00 0  0.00  0
dn                        1.62   4.98 14.21 -7.29 0 -2.14  0
mavg                      0.33   7.66 10.97 -7.48 0 -2.12  0
up                        7.05   7.03  1.11 -7.36 0  1.00  0
pctB                      7.02   5.59 -5.14 -9.38 0 -4.90  0
mfi                      -9.09  -2.31 -2.55 -3.62 0 -3.00  0
Close.EMA.14              2.40  -1.33 -7.82 -9.81 0 -5.22  0
ticker.rsi.signals        1.81   0.18 -3.04 -2.60 0  0.00  0
                        MeanDecreaseAccuracy MeanDecreaseGini
ticker.multisma.signals                 1.21             0.58
Close.SMA.20                           44.85            12.23
Close.SMA.50                           44.29            12.56
ticker.return.signals                 159.23            33.81
daily.returns                         307.90           245.14
Open                                   57.37            15.40
Close                                  55.02            14.99
High                                   46.06            13.38
Low                                    58.30            15.78
Volume                                 66.30            28.40
ticker.sma.signals                     32.02             3.95
tdi                                    17.19            14.67
di                                     21.49            15.93
ticker.bbands.signals                  -2.06             0.08
dn                                     46.06            13.58
mavg                                   43.40            12.00
up                                     37.20            13.19
pctB                                   60.43            22.00
mfi                                    24.49            15.36
Close.EMA.14                           59.80            20.25
ticker.rsi.signals                      5.46             0.60
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
The following `from` values were not present in `x`: tickerTestData$daily.returns
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> rename(csvData, c("tickerTestData.daily.returns"="Returns %", "ticker.prediction"="Predicted Returns %","tickerTestData.ticker.return.signals"="Recommendation Signals",
+ 				"tickerTestData.Open"="Open", "tickerTestData.High"="High","tickerTestData.Low"="Low","tickerTestData.Close"="Close", 
+ 				"tickerTestData.Volume"="Volume","tickerTestData.Close.SMA.20"="20 DAY SMA","tickerTestData.Close.SMA.50"="50 DAY SMA",
+ 				"tickerTestData.dn"="LOWEN BBAND ","tickerTestData.up"="HIGHER BBAND","tickerTestData.mavg"="MAVG","tickerTestData.pctB"="BBAND PCTB","tickerTestData.mfi"="MONEY FLOW INDEX"))
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> rename(csvData, c("tickerTestData.daily.returns"="Returns %", "ticker.prediction"="Predicted Returns %","tickerTestData.ticker.return.signals"="Recommendation Signals",
+ 				"tickerTestData.Open"="Open", "tickerTestData.High"="High","tickerTestData.Low"="Low","tickerTestData.Close"="Close", 
+ 				"tickerTestData.Volume"="Volume","tickerTestData.Close.SMA.20"="20 DAY SMA","tickerTestData.Close.SMA.50"="50 DAY SMA",
+ 				"tickerTestData.dn"="LOWEN BBAND ","tickerTestData.up"="HIGHER BBAND","tickerTestData.mavg"="MAVG","tickerTestData.pctB"="BBAND PCTB","tickerTestData.mfi"="MONEY FLOW INDEX"))
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> rename(csvData, c("tickerTestData.daily.returns"="actual returns %", "ticker.prediction"="predicted returns %","tickerTestData.ticker.return.signals"="recommendation signals",
+ 				"tickerTestData.Open"="open", "tickerTestData.High"="high","tickerTestData.Low"="low","tickerTestData.Close"="close", 
+ 				"tickerTestData.Volume"="volume","tickerTestData.Close.SMA.20"="20 day sma","tickerTestData.Close.SMA.50"="50 day sma",
+ 				"tickerTestData.dn"="lower bband ","tickerTestData.up"="higher bband","tickerTestData.mavg"="mavg","tickerTestData.pctB"="bband pctb","tickerTestData.mfi"="money flow index"))
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> rename(csvData, c("tickerTestData.daily.returns"="actual returns %", "ticker.prediction"="predicted returns %","tickerTestData.ticker.return.signals"="recommendation signals",
+ 				"tickerTestData.Open"="open", "tickerTestData.High"="high","tickerTestData.Low"="low","tickerTestData.Close"="close", 
+ 				"tickerTestData.Volume"="volume","tickerTestData.Close.SMA.20"="20 day sma","tickerTestData.Close.SMA.50"="50 day sma",
+ 				"tickerTestData.dn"="lower bband ","tickerTestData.up"="higher bband","tickerTestData.mavg"="mavg","tickerTestData.pctB"="bband pctb","tickerTestData.mfi"="money flow index"))
> 
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 756, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.92%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  1  0  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  2  3  0   0   0   0  0  0 0 0  0.60000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.57  0.00   3.41  -0.46  -6.46  -0.69
Close.SMA.20             0  0 -6.26 11.83 -6.38  -5.72  20.31  40.55  16.06
Close.SMA.50             0  0 -5.93  6.38 -4.88  -3.77  15.10  40.07  15.12
ticker.return.signals    0  0  9.74 53.56 56.84  32.61  66.24  64.29  60.16
daily.returns            0  0 10.88 52.62 43.67 139.05 284.19 292.12 274.46
Open                     0  0 -6.18 11.15 -3.11  -6.10  30.10  45.58  24.44
Close                    0  0 -5.96  8.42  1.31  -0.55  28.73  48.01  30.83
High                     0  0 -5.31 11.76 -3.44  -5.97  28.53  41.32  21.66
Low                      0  0 -6.42 12.64 -1.16  -6.06  21.54  41.36  25.34
Volume                   0  0  8.63 43.76  0.68  42.46  20.57  60.99  35.92
ticker.sma.signals       0  0  1.00  1.27 -2.05  -3.14  -0.63   3.83   2.01
tdi                      0  0 -0.60 -0.10 -4.45  -1.90   2.20  12.16  -6.95
di                       0  0  5.75  6.32 -6.96  -0.80   9.40  23.80   1.47
ticker.bbands.signals    0  0  0.00 -3.02  0.00  -3.34   0.29  -8.36   0.69
dn                       0  0 -5.30  9.50 -4.55 -10.63  21.07  38.05   8.67
mavg                     0  0 -5.25 13.43 -6.49  -7.63  22.58  42.09  15.63
up                       0  0 -3.88 10.38 -8.04  -5.73  22.86  40.15  14.33
pctB                     0  0  8.93  2.20 -6.15  16.42  33.14  40.34  34.45
mfi                      0  0 -5.15 13.85 -8.94  -5.48  25.83  35.61   8.37
Close.EMA.14             0  0 -0.18  4.78  2.66  11.59  29.36  44.90  19.52
ticker.rsi.signals       0  0  1.00  2.08  2.18   2.34   4.63   7.25  -2.81
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   5.19   2.21  0.00 0                -4.08
Close.SMA.20              5.99   8.04  1.96 0                46.02
Close.SMA.50             -0.51   6.76  4.09 0                42.72
ticker.return.signals    33.32 106.72 54.69 0               115.19
daily.returns           154.49  77.47 50.90 0               321.12
Open                      1.15  21.32 -4.37 0                54.59
Close                    -5.22  13.44 -2.09 0                55.94
High                     -0.90  14.86 -4.10 0                49.86
Low                      -1.67  16.73 -2.92 0                47.32
Volume                   26.53  11.57 38.64 0                84.86
ticker.sma.signals       14.78   4.06  2.03 0                 9.31
tdi                       1.63  -4.84 -1.76 0                 4.74
di                       13.96  -3.74  5.37 0                24.74
ticker.bbands.signals    -1.25  -1.37  0.00 0                -7.13
dn                       18.60   6.83  4.54 0                42.76
mavg                      6.68   6.98  3.39 0                46.66
up                        3.40   4.84 -3.15 0                44.93
pctB                     18.61   3.47  6.16 0                61.31
mfi                       3.75  16.66  6.38 0                41.26
Close.EMA.14              6.88   2.73 13.10 0                53.68
ticker.rsi.signals       -2.89   5.29 -3.27 0                 6.34
                        MeanDecreaseGini
ticker.multisma.signals             0.60
Close.SMA.20                       10.62
Close.SMA.50                       11.41
ticker.return.signals              13.84
daily.returns                     239.73
Open                               11.32
Close                              11.38
High                               10.29
Low                                10.61
Volume                             29.28
ticker.sma.signals                  1.94
tdi                                11.50
di                                 12.03
ticker.bbands.signals               0.27
dn                                 11.49
mavg                               10.86
up                                 11.29
pctB                               20.57
mfi                                13.71
Close.EMA.14                       15.33
ticker.rsi.signals                  0.56
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 728, 729
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.92%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  0  1  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  2  3  0   0   0   0  0  0 0 0  0.60000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.00  1.39   3.98  -1.15  -4.69   3.49
Close.SMA.20             0  0 -6.01 12.33 -7.86  -6.06  22.47  41.38  14.95
Close.SMA.50             0  0 -4.60  6.42 -5.12  -4.75  14.52  40.09  12.88
ticker.return.signals    0  0 10.55 54.72 57.46  32.38  66.05  64.08  60.49
daily.returns            0  0 10.55 54.20 42.48 136.54 280.04 290.80 274.33
Open                     0  0 -5.93 12.47 -5.00  -4.34  29.63  45.42  23.32
Close                    0  0 -7.16  9.63  2.47   1.61  27.86  47.35  31.89
High                     0  0 -6.26 12.56 -3.85  -6.90  26.83  41.41  22.28
Low                      0  0 -6.18 15.11 -0.81  -5.54  23.07  40.55  23.61
Volume                   0  0  7.90 44.02  1.21  42.02  17.25  60.94  35.86
ticker.sma.signals       0  0  0.00  1.39 -3.11  -2.00  -1.06   5.02   3.19
tdi                      0  0  0.60  1.97 -4.72  -1.10   0.55  12.71  -4.61
di                       0  0  4.59  4.15 -6.15  -0.89   7.56  25.20   0.52
ticker.bbands.signals    0  0  0.00 -2.64  1.40  -2.96  -1.48  -8.06   0.39
dn                       0  0 -6.34  8.49 -4.19 -11.76  20.28  37.74   8.43
mavg                     0  0 -5.49 10.83 -7.82  -6.79  22.42  41.73  14.08
up                       0  0 -1.29 10.96 -7.76  -3.55  23.50  39.89  12.95
pctB                     0  0  8.70  2.15 -5.04  16.56  32.38  40.50  31.09
mfi                      0  0 -4.23 14.76 -9.53  -8.60  24.40  34.02   8.99
Close.EMA.14             0  0 -0.82  5.24  1.72  10.80  28.98  45.35  19.15
ticker.rsi.signals       0  0  0.00  2.22  2.67   1.03   4.97   9.06  -3.33
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   3.58   2.31  0.00 0                -1.47
Close.SMA.20              5.59   6.37  1.08 0                46.75
Close.SMA.50             -0.66   5.48  5.16 0                41.74
ticker.return.signals    33.64 106.50 55.57 0               114.58
daily.returns           151.46  76.36 50.14 0               318.48
Open                      1.88  21.32 -5.79 0                54.07
Close                    -7.36  15.14  0.08 0                56.37
High                     -0.81  15.48 -1.87 0                50.58
Low                      -1.88  17.35 -2.23 0                48.21
Volume                   25.71  12.40 38.86 0                83.40
ticker.sma.signals       15.00   3.68  1.57 0                10.24
tdi                       2.77  -4.69 -2.44 0                 6.02
di                       10.72  -4.38  6.60 0                23.53
ticker.bbands.signals    -2.96  -2.37  0.00 0                -7.82
dn                       18.20   5.53  4.90 0                42.18
mavg                      4.03   6.24  2.42 0                46.31
up                        2.18   0.69 -2.70 0                44.69
pctB                     20.26   3.56  7.66 0                60.33
mfi                       1.95  15.08  5.30 0                38.17
Close.EMA.14              8.40   0.21 11.87 0                54.35
ticker.rsi.signals       -3.36   4.96 -3.85 0                 7.15
                        MeanDecreaseGini
ticker.multisma.signals             0.59
Close.SMA.20                       10.78
Close.SMA.50                       11.59
ticker.return.signals              13.96
daily.returns                     238.62
Open                               11.30
Close                              11.38
High                               10.43
Low                                10.64
Volume                             29.32
ticker.sma.signals                  1.91
tdi                                11.72
di                                 12.11
ticker.bbands.signals               0.29
dn                                 11.52
mavg                               10.83
up                                 11.36
pctB                               20.46
mfi                                13.56
Close.EMA.14                       15.60
ticker.rsi.signals                  0.58
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 756, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.92%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  0  1  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  2  3  0   0   0   0  0  0 0 0  0.60000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.00  0.00   3.72   1.59  -5.78   2.00
Close.SMA.20             0  0 -4.59 10.61 -7.58  -9.29  20.47  41.25  16.83
Close.SMA.50             0  0 -5.79  6.89 -4.16  -4.98  15.52  39.26  13.92
ticker.return.signals    0  0 10.74 54.12 57.49  32.38  65.79  64.99  60.43
daily.returns            0  0 11.25 54.10 43.25 139.79 279.85 293.28 275.96
Open                     0  0 -5.29 11.57 -4.51  -6.06  29.57  44.72  22.94
Close                    0  0 -5.34  9.94  0.08   0.19  26.66  47.33  30.40
High                     0  0 -6.80 12.12 -4.08  -6.71  25.65  39.88  22.53
Low                      0  0 -6.87 14.10 -0.56  -3.98  22.45  41.23  24.59
Volume                   0  0  9.09 43.84  1.07  41.03  18.02  62.33  36.71
ticker.sma.signals       0  0  0.00  2.12 -0.45  -3.49  -2.50   2.54   2.45
tdi                      0  0  0.34  0.56 -2.61  -2.64   1.31  11.82  -4.82
di                       0  0  4.70  5.92 -5.12  -1.03   7.99  21.82   0.21
ticker.bbands.signals    0  0  0.00 -2.36  1.00  -2.89  -0.57  -7.96  -0.68
dn                       0  0 -5.50  9.90 -4.91 -12.83  20.84  39.63   8.47
mavg                     0  0 -5.20  9.64 -5.02  -7.98  23.42  41.92  14.00
up                       0  0 -4.20  8.34 -8.27  -3.44  21.15  41.05  14.12
pctB                     0  0  9.42  2.80 -5.74  15.82  30.11  40.66  33.76
mfi                      0  0 -4.63 14.01 -6.36  -5.15  23.99  36.14   9.15
Close.EMA.14             0  0  1.48  5.72  3.90  11.91  28.64  44.95  18.89
ticker.rsi.signals       0  0  0.00  1.73  2.78   2.30   3.73   8.15  -1.78
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   4.17   1.79  0.00 0                -1.61
Close.SMA.20              3.47   6.63  1.77 0                46.54
Close.SMA.50             -1.10   6.75  3.92 0                40.89
ticker.return.signals    33.96 108.94 55.31 0               116.61
daily.returns           152.95  78.09 50.44 0               320.26
Open                      3.30  22.39 -3.54 0                53.45
Close                    -5.34  15.21 -0.18 0                54.89
High                     -1.41  13.85 -1.44 0                48.44
Low                      -1.83  16.47 -2.00 0                49.19
Volume                   25.82  12.58 38.44 0                85.73
ticker.sma.signals       14.97   2.74  1.84 0                 7.85
tdi                       3.00  -4.02 -2.46 0                 5.75
di                       11.34  -4.85  5.22 0                21.08
ticker.bbands.signals    -2.81  -1.40  0.00 0                -8.01
dn                       17.21   7.72  4.25 0                42.62
mavg                      6.07   5.87  4.19 0                46.81
up                        2.60   2.16 -0.59 0                45.11
pctB                     19.10   1.66  4.62 0                60.15
mfi                       1.96  16.57  6.90 0                40.85
Close.EMA.14              5.20   2.68 12.98 0                52.65
ticker.rsi.signals       -3.34   5.41 -3.82 0                 6.59
                        MeanDecreaseGini
ticker.multisma.signals             0.61
Close.SMA.20                       10.65
Close.SMA.50                       11.55
ticker.return.signals              13.99
daily.returns                     239.56
Open                               11.21
Close                              11.32
High                               10.33
Low                                10.60
Volume                             29.37
ticker.sma.signals                  1.93
tdi                                11.53
di                                 12.03
ticker.bbands.signals               0.29
dn                                 11.53
mavg                               10.73
up                                 11.33
pctB                               20.45
mfi                                13.52
Close.EMA.14                       15.34
ticker.rsi.signals                  0.57
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 728, 729
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.92%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  0  1  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  2  3  0   0   0   0  0  0 0 0  0.60000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4     -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.00   1.00   4.04  -1.47  -5.82   3.67
Close.SMA.20             0  0 -4.60 10.09  -7.64  -7.74  23.31  40.98  15.18
Close.SMA.50             0  0 -5.40  7.78  -4.06  -3.58  15.36  40.61  15.75
ticker.return.signals    0  0 10.30 53.26  56.66  32.85  66.49  63.80  61.96
daily.returns            0  0 10.55 52.98  43.24 139.49 285.39 291.64 275.87
Open                     0  0 -5.84 12.87  -4.41  -6.59  29.99  45.03  24.94
Close                    0  0 -5.93  8.27   0.39   0.60  27.62  47.24  28.92
High                     0  0 -6.42 12.47  -4.18  -7.76  25.56  41.07  21.88
Low                      0  0 -5.52 11.11  -0.64  -5.40  24.06  42.73  24.44
Volume                   0  0  8.27 44.45   0.52  41.85  19.74  59.02  37.26
ticker.sma.signals       0  0  0.00  2.69  -1.33  -3.13  -1.43   3.31   1.83
tdi                      0  0  0.78  1.82  -1.74  -1.57   4.48  12.11  -5.21
di                       0  0  5.75  4.52  -6.93   0.26   8.65  24.68   1.43
ticker.bbands.signals    0  0  0.00 -3.14   1.00  -2.03   1.23  -6.70  -1.50
dn                       0  0 -5.93  9.00  -5.43 -12.67  20.18  39.00   8.42
mavg                     0  0 -5.49 10.17  -6.57  -7.29  23.83  40.39  15.78
up                       0  0 -3.68 11.05  -7.87  -2.30  21.09  40.51  14.60
pctB                     0  0  9.00  2.55  -4.02  16.06  31.86  41.34  32.08
mfi                      0  0 -4.72 13.49 -10.92  -7.19  24.52  34.94   7.03
Close.EMA.14             0  0  0.82  5.85   2.85  12.29  28.48  47.37  19.12
ticker.rsi.signals       0  0  0.00  2.75   3.06   0.35   1.88   9.01  -1.81
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   4.54   2.95  1.00 0                -1.80
Close.SMA.20              5.53   7.19  1.68 0                46.50
Close.SMA.50             -0.92   5.20  4.68 0                42.94
ticker.return.signals    33.38 107.82 55.03 0               115.11
daily.returns           153.03  78.66 49.72 0               321.70
Open                      1.26  21.69 -4.37 0                54.08
Close                    -4.95  13.78 -0.26 0                55.60
High                     -2.82  14.48  0.13 0                50.24
Low                      -1.60  16.87 -4.76 0                49.78
Volume                   24.63  14.38 37.52 0                85.96
ticker.sma.signals       16.10   4.32  1.71 0                 9.11
tdi                       3.40  -2.83 -3.07 0                 7.28
di                       10.65  -4.47  6.12 0                23.92
ticker.bbands.signals    -2.13  -2.79  0.00 0                -6.39
dn                       18.53   5.61  3.99 0                42.20
mavg                      5.51   7.21  2.80 0                46.82
up                        3.47   3.12 -1.88 0                45.50
pctB                     18.18   5.27  5.95 0                60.77
mfi                       1.21  14.89  4.72 0                39.03
Close.EMA.14              6.28   2.15 12.81 0                55.01
ticker.rsi.signals       -2.67   5.10 -4.62 0                 6.22
                        MeanDecreaseGini
ticker.multisma.signals             0.59
Close.SMA.20                       10.77
Close.SMA.50                       11.53
ticker.return.signals              13.87
daily.returns                     240.37
Open                               11.32
Close                              11.32
High                               10.42
Low                                10.53
Volume                             28.93
ticker.sma.signals                  1.96
tdi                                11.45
di                                 12.09
ticker.bbands.signals               0.29
dn                                 11.43
mavg                               10.64
up                                 11.34
pctB                               20.33
mfi                                13.50
Close.EMA.14                       15.34
ticker.rsi.signals                  0.59
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.76%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  1  0  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  3  2  0   0   0   0  0  0 0 0  0.40000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  0.00  1.00   4.52   0.17  -5.65   1.87
Close.SMA.20             0  0 -4.54 11.03 -7.62  -7.00  22.59  41.95  15.01
Close.SMA.50             0  0 -5.49  8.39 -4.61  -2.36  15.00  39.76  13.83
ticker.return.signals    0  0 10.64 54.84 57.61  32.59  65.50  64.38  60.04
daily.returns            0  0 11.21 54.37 43.10 138.11 277.16 287.65 272.42
Open                     0  0 -5.31 13.14 -3.71  -4.73  29.53  45.95  22.88
Close                    0  0 -7.44  9.02 -0.46   0.08  25.93  48.01  30.64
High                     0  0 -6.01 12.07 -3.31  -7.30  25.81  40.48  21.17
Low                      0  0 -5.93 13.35 -1.38  -5.16  21.78  41.51  24.34
Volume                   0  0  9.32 46.24  2.41  43.30  19.45  60.15  36.81
ticker.sma.signals       0  0  0.00  1.41 -1.54  -2.61   0.43   4.09   1.16
tdi                      0  0  0.76  2.01 -3.04  -4.02   2.31  11.61  -5.78
di                       0  0  6.26  4.91 -5.60  -0.50   9.11  21.73  -0.54
ticker.bbands.signals    0  0  0.00 -2.88  1.00  -2.36  -1.54  -8.34  -2.54
dn                       0  0 -4.15  8.79 -4.29 -12.04  18.91  39.95   8.97
mavg                     0  0 -5.40 10.02 -7.11  -8.12  21.96  42.04  12.45
up                       0  0 -3.27 10.57 -6.76  -3.86  22.26  40.23  13.56
pctB                     0  0 10.10  1.39 -3.24  16.09  31.31  42.89  32.54
mfi                      0  0 -4.43 13.66 -9.69  -5.14  25.68  35.08   7.51
Close.EMA.14             0  0 -0.67  5.03  2.56  10.25  28.39  46.76  19.40
ticker.rsi.signals       0  0  0.00  2.60  3.05   1.50   3.64   7.87  -3.71
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   4.41   2.71  1.00 0                -2.20
Close.SMA.20              4.72   6.97  1.14 0                47.32
Close.SMA.50             -2.26   4.97  5.05 0                41.47
ticker.return.signals    32.69 107.68 54.93 0               116.41
daily.returns           152.59  76.78 50.64 0               315.08
Open                      1.40  23.10 -1.94 0                54.57
Close                    -4.84  13.65  0.56 0                55.17
High                     -0.77  15.41 -1.46 0                47.51
Low                      -0.42  17.04 -2.86 0                48.60
Volume                   28.73  11.10 38.83 0                85.30
ticker.sma.signals       16.66   3.34  1.96 0                10.34
tdi                       2.62  -4.47 -1.65 0                 4.96
di                       13.19  -2.88  4.77 0                22.14
ticker.bbands.signals    -2.76  -1.27  0.00 0                -9.07
dn                       18.46   6.06  5.19 0                43.24
mavg                      5.22   5.91  2.38 0                46.34
up                        2.92   3.07  0.26 0                44.65
pctB                     17.95   2.65  4.41 0                62.14
mfi                       1.45  16.07  7.21 0                39.57
Close.EMA.14              7.98   2.44 13.26 0                54.41
ticker.rsi.signals       -4.47   5.88 -2.90 0                 5.20
                        MeanDecreaseGini
ticker.multisma.signals             0.63
Close.SMA.20                       10.78
Close.SMA.50                       11.75
ticker.return.signals              13.98
daily.returns                     238.10
Open                               11.37
Close                              11.51
High                               10.43
Low                                10.61
Volume                             29.44
ticker.sma.signals                  1.98
tdi                                11.62
di                                 12.13
ticker.bbands.signals               0.28
dn                                 11.72
mavg                               10.75
up                                 11.36
pctB                               20.56
mfi                                13.61
Close.EMA.14                       15.28
ticker.rsi.signals                  0.60
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in if (ticker.return[i] > percent.absolute) { : 
  argument is of length zero
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 5.08%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  1  0  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  2  3  0   0   0   0  0  0 0 0  0.60000000
-3  0  0  1  2  2  1   0   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   8 29  0 0 0  0.21621622
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.00  1.00   2.87  -1.76  -6.81   1.34
Close.SMA.20             0  0 -5.84 11.20 -5.91  -7.46  22.07  42.45  15.95
Close.SMA.50             0  0 -5.76  5.87 -4.42  -1.49  16.95  40.18  15.21
ticker.return.signals    0  0 10.35 53.89 57.85  32.72  66.03  64.79  61.58
daily.returns            0  0 11.16 54.21 44.07 139.75 282.32 289.93 274.18
Open                     0  0 -6.09 13.18 -3.52  -6.77  29.26  45.56  23.29
Close                    0  0 -6.26  9.20  0.55  -1.12  27.29  47.72  30.08
High                     0  0 -5.01 13.81 -3.15  -6.16  27.93  39.50  22.15
Low                      0  0 -6.94 16.20 -1.38  -4.19  23.29  42.79  23.59
Volume                   0  0  8.76 45.19  1.17  40.20  20.34  61.19  34.77
ticker.sma.signals       0  0  0.00  2.22 -3.26  -2.81   0.91   3.74   0.63
tdi                      0  0  2.12  2.25 -3.89  -1.74   1.04  12.85  -5.61
di                       0  0  4.70  3.71 -6.32  -0.87   8.38  22.44   0.38
ticker.bbands.signals    0  0  0.00 -3.01  1.00  -3.06  -1.39  -7.84  -0.88
dn                       0  0 -5.93 10.04 -3.68 -11.05  18.92  38.87   8.87
mavg                     0  0 -5.12 11.19 -8.69  -8.33  21.62  42.34  15.50
up                       0  0 -3.13 10.72 -6.88  -4.36  23.61  40.05  15.06
pctB                     0  0  9.48  1.16 -4.48  15.73  31.37  41.17  30.17
mfi                      0  0 -4.11 14.85 -9.61  -6.26  25.75  37.21   6.65
Close.EMA.14             0  0  0.71  6.52  4.57  13.76  28.30  46.01  19.93
ticker.rsi.signals       0  0  0.00  3.13  2.18   1.20   3.10   9.76  -1.77
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   4.20   1.98  0.00 0                -4.13
Close.SMA.20              4.09   4.92  0.69 0                47.39
Close.SMA.50             -1.20   6.40  5.38 0                43.99
ticker.return.signals    33.60 107.64 55.10 0               115.83
daily.returns           150.00  77.42 50.97 0               319.28
Open                      1.96  21.70 -3.06 0                53.58
Close                    -5.07  16.20 -1.10 0                55.51
High                     -1.51  15.12 -2.31 0                49.15
Low                      -2.12  16.36 -2.47 0                49.92
Volume                   27.89  12.55 38.05 0                85.18
ticker.sma.signals       15.50   3.48  2.11 0                 9.22
tdi                       3.84  -4.87 -1.57 0                 6.05
di                       11.88  -4.58  5.14 0                22.19
ticker.bbands.signals    -2.26  -1.86  0.00 0                -8.30
dn                       18.57   7.86  5.33 0                42.94
mavg                      5.56   6.61  2.22 0                47.64
up                        2.68   3.94 -1.47 0                45.90
pctB                     19.14   2.56  7.22 0                60.32
mfi                      -0.60  14.36  6.83 0                40.55
Close.EMA.14             10.29   1.30 13.74 0                55.11
ticker.rsi.signals       -3.27   6.61 -3.70 0                 7.36
                        MeanDecreaseGini
ticker.multisma.signals             0.58
Close.SMA.20                       10.64
Close.SMA.50                       11.48
ticker.return.signals              13.92
daily.returns                     239.52
Open                               11.30
Close                              11.44
High                               10.46
Low                                10.66
Volume                             29.31
ticker.sma.signals                  1.92
tdi                                11.49
di                                 12.00
ticker.bbands.signals               0.29
dn                                 11.55
mavg                               10.80
up                                 11.39
pctB                               20.38
mfi                                13.58
Close.EMA.14                       15.40
ticker.rsi.signals                  0.58
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in if (ticker.return[i] > percent.absolute) { : 
  argument is of length zero
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in if (ticker.return[i] > percent.absolute) { : 
  argument is of length zero
In addition: Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 4.76%
Confusion matrix:
   -8 -6 -5 -4 -3 -2  -1   0   1  2  3 4 6 class.error
-8  0  0  0  0  0  0   1   0   0  0  0 0 0  1.00000000
-6  0  0  0  1  0  0   0   0   0  0  0 0 0  1.00000000
-5  0  0  0  2  0  0   0   0   0  0  0 0 0  1.00000000
-4  0  0  0  3  2  0   0   0   0  0  0 0 0  0.40000000
-3  0  0  1  2  2  0   1   0   0  0  0 0 0  0.66666667
-2  0  0  0  0  0 19   9   0   0  0  0 0 0  0.32142857
-1  0  0  0  0  0  0 136   0   0  0  0 0 0  0.00000000
0   0  0  0  0  0  0   0 260   0  0  0 0 0  0.00000000
1   0  0  0  0  0  0   0   0 138  0  0 0 0  0.00000000
2   0  0  0  0  0  0   0   0   7 30  0 0 0  0.18918919
3   0  0  0  0  0  0   0   0   1  0 10 0 0  0.09090909
4   0  0  0  0  0  0   0   0   0  0  2 2 0  0.50000000
6   0  0  0  0  0  0   0   0   0  0  1 0 0  1.00000000
                        -8 -6    -5    -4    -3     -2     -1      0      1
ticker.multisma.signals  0  0  0.00  1.00  1.00   3.79  -0.30  -6.88   3.18
Close.SMA.20             0  0 -5.75 12.10 -7.33  -6.13  23.50  41.88  14.08
Close.SMA.50             0  0 -5.67  8.28 -4.06  -2.79  17.39  40.25  13.69
ticker.return.signals    0  0  9.48 54.58 57.23  31.63  66.38  64.85  60.28
daily.returns            0  0  9.85 54.06 42.98 138.52 280.79 289.09 271.29
Open                     0  0 -6.26 13.17 -5.10  -5.20  30.76  44.76  23.22
Close                    0  0 -6.65  9.89 -0.34   0.96  26.67  47.50  30.72
High                     0  0 -5.49 12.81 -3.54  -5.84  26.16  39.36  22.30
Low                      0  0 -6.73 13.21 -0.27  -4.85  23.37  41.04  24.06
Volume                   0  0  7.59 43.65  0.80  39.45  19.13  61.29  35.21
ticker.sma.signals       0  0  0.00  1.00 -2.64  -3.09   0.89   3.50   0.94
tdi                      0  0 -1.04  2.07 -3.30  -3.71   3.35  14.17  -6.96
di                       0  0  5.58  6.31 -6.55  -2.06   7.77  22.50   0.33
ticker.bbands.signals    0  0  0.00 -3.26  1.00  -3.76  -0.04 -10.20  -1.86
dn                       0  0 -5.67 11.33 -3.95 -11.96  20.43  38.41   9.18
mavg                     0  0 -5.11 11.51 -7.09  -8.28  22.26  42.04  14.44
up                       0  0 -3.36  9.67 -9.76  -3.81  22.92  40.49  14.13
pctB                     0  0  8.42  2.83 -5.70  14.44  31.93  42.52  31.19
mfi                      0  0 -3.92 14.40 -7.95  -6.08  24.96  35.11   7.48
Close.EMA.14             0  0 -0.82  4.61  3.28  10.33  28.10  45.19  18.70
ticker.rsi.signals       0  0  1.00  1.73  2.09  -0.64   3.71   7.62  -1.64
                             2      3     4 6 MeanDecreaseAccuracy
ticker.multisma.signals   4.66   2.93  1.34 0                -2.15
Close.SMA.20              4.06   6.93  2.20 0                47.19
Close.SMA.50             -1.87   7.25  4.79 0                43.48
ticker.return.signals    33.12 107.76 55.19 0               115.87
daily.returns           151.61  77.08 50.69 0               316.12
Open                      2.11  22.73 -3.34 0                53.80
Close                    -5.17  12.54 -0.81 0                55.39
High                     -1.00  15.56 -0.71 0                47.65
Low                      -2.30  16.54 -0.53 0                48.36
Volume                   27.35  11.34 38.19 0                84.95
ticker.sma.signals       14.47   3.69  2.63 0                 8.67
tdi                       2.25  -4.23 -2.91 0                 6.69
di                       11.51  -5.47  6.78 0                22.03
ticker.bbands.signals    -2.71  -2.34  0.00 0                -9.90
dn                       17.49   6.44  5.33 0                43.14
mavg                      4.17   8.01  1.03 0                47.25
up                        3.65   3.48 -2.40 0                45.63
pctB                     18.19   3.07  4.87 0                61.35
mfi                       0.60  14.27  4.48 0                38.86
Close.EMA.14              8.14   3.05 11.76 0                53.88
ticker.rsi.signals       -3.38   5.45 -3.47 0                 6.00
                        MeanDecreaseGini
ticker.multisma.signals             0.62
Close.SMA.20                       10.70
Close.SMA.50                       11.58
ticker.return.signals              14.02
daily.returns                     239.38
Open                               11.27
Close                              11.29
High                               10.26
Low                                10.65
Volume                             29.13
ticker.sma.signals                  1.97
tdi                                11.60
di                                 12.08
ticker.bbands.signals               0.28
dn                                 11.60
mavg                               10.76
up                                 11.28
pctB                               20.61
mfi                                13.63
Close.EMA.14                       15.28
ticker.rsi.signals                  0.57
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in if (ticker.return[i] > percent.absolute) { : 
  argument is of length zero
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
Error in if (ticker.return[i] > percent.absolute) { : 
  argument is of length zero
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 756, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.858345 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 756, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.370307 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in `[.xts`(ticker.return, i + 1) : subscript out of bounds
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.751858 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.79526 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
Error in getPeriodReturnSignals(tickerOHLC, "daily", 2) : 
  object 'n' not found
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.431942 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> getPeriodReturnSignals(ticker, timeFrequency, percent)
Error in getPeriodReturnSignals(ticker, timeFrequency, percent) : 
  object 'percent' not found
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
Error in file(file, "rt") : cannot open the connection
In addition: Warning messages:
1: 'memory.limit()' is Windows-specific 
2: In file(file, "rt") : unable to resolve 'ichart.finance.yahoo.com'
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 2.18704 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
Error in getPeriodReturnSignals(tickerOHLC, "daily", 2) : 
  object 'n' not found
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.5306659 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
Error in getPeriodReturnSignals(tickerOHLC, "daily", 2) : 
  object 'n' not found
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.4535611 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.7021961 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.8296402 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.7581739 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.747905 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.723062 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in data.frame(ticker.return.signals, ticker.return, ticker.return.factors,  : 
  arguments imply differing number of rows: 758, 757
In addition: Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.734483 secs
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
> #source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 12.63%
Confusion matrix:
   -6 -5 -4 -3 -2  -1   0   1  2  3 4 5 6 7 10 class.error
-6  0  2  2  1  0   0   0   0  0  0 0 0 0 0  0  1.00000000
-5  0  2  2  4  1   0   0   0  0  0 0 0 0 0  0  0.77777778
-4  2  1  1  4  0   1   0   0  0  0 0 0 0 0  0  0.88888889
-3  0  1  0 16  4   4   0   0  0  0 0 0 0 0  0  0.36000000
-2  0  0  0  1 21  13   0   0  0  0 0 0 0 0  0  0.40000000
-1  0  0  0  1  2 122   0   0  0  0 0 0 0 0  0  0.02400000
0   0  0  0  0  0   0 217   0  0  0 0 0 0 0  0  0.00000000
1   0  0  0  0  0   0   0 136  0  1 0 0 0 0  0  0.00729927
2   0  0  0  0  0   0   0   4 43  3 0 0 0 0  0  0.14000000
3   0  0  0  0  0   0   0   1 10 14 2 0 0 0  0  0.48148148
4   0  0  0  0  0   0   0   1  0  4 2 1 0 1  0  0.77777778
5   0  0  0  0  0   0   0   0  1  1 3 0 0 0  0  1.00000000
6   0  0  0  0  0   0   0   0  0  1 0 0 0 0  0  1.00000000
7   0  0  0  0  0   0   0   0  0  1 1 0 0 0  0  1.00000000
10  0  0  0  0  0   0   0   1  0  0 0 0 0 0  0  1.00000000
                           -6    -5     -4     -3     -2     -1      0      1
ticker.multisma.signals  0.00  1.00   1.00  -4.26  -3.02  -7.22   5.91   7.65
Close.SMA.20            -0.63  8.72  -0.58  10.37  13.05  17.62  34.55  28.74
Close.SMA.50            -2.57  4.33  -5.56  13.08  10.30  20.13  36.02  23.52
ticker.return.signals   -0.56 -6.13  14.04  -9.45  -3.20  -6.30  13.98   2.03
daily.returns           37.18 64.05  51.51 117.91 143.17 249.70 272.64 259.12
Open                    -4.73  4.46   2.32  13.76  13.54  30.30  48.24  35.76
Close                    5.69  9.43  12.35  20.44  17.22  22.37  46.35  38.16
High                    -2.10  0.52   6.93  14.22   9.87  22.13  33.62  31.53
Low                      3.27 11.10   7.09  19.84  15.42  27.91  49.69  34.54
Volume                  12.88 39.43  21.23  38.15  25.30   2.78  54.53  31.19
ticker.sma.signals       2.80  4.59  -0.41   6.39   4.61  28.05  27.30  11.74
tdi                      0.99  1.84  -2.91  -7.31   8.60   8.56  15.42   6.84
di                      14.16 12.92  25.52  -9.62   3.28  10.41  22.24  12.68
ticker.bbands.signals    0.00  0.00   0.00  -1.40   1.00   2.23  -0.86  -0.25
dn                       7.78  4.10   2.97   7.75   5.70  23.11  35.04  28.90
mavg                    -3.02  9.08  -0.79  10.53  11.91  17.69  34.65  27.34
up                      -4.76  4.41   0.94  10.76  16.02  13.30  27.89  20.03
pctB                    12.06 34.71   4.14  24.64  19.62  19.67  43.57  38.91
mfi                      1.08 -8.53 -10.97   3.51   6.34  -1.34  32.49  21.69
Close.EMA.14            17.17 27.41  14.26  28.87  23.55  12.39  47.21  45.86
ticker.rsi.signals       1.05 -2.76   2.11   4.87   2.17   3.96   4.41   1.97
                             2      3     4     5 6     7 10
ticker.multisma.signals  -2.93   3.27  0.00  1.00 0  0.00  0
Close.SMA.20              3.22   3.17 10.56 -5.62 0 -1.34  0
Close.SMA.50              8.36  -2.49  4.26 -4.88 0  0.58  0
ticker.return.signals    11.02  -9.18 -1.64  1.38 0  0.00  0
daily.returns           157.80 117.88 51.04 18.70 0  3.74  0
Open                      8.35   5.29 16.03 -1.76 0 -2.98  0
Close                     5.39  -0.61  7.46 -4.16 0 -4.48  0
High                      5.48  -5.38  8.74 -3.12 0 -3.90  0
Low                       7.36   7.46 17.99 -0.67 0 -2.84  0
Volume                   15.74  32.56  6.04 10.60 0  1.51  0
ticker.sma.signals       -6.00  12.59  4.50 -0.10 0  0.00  0
tdi                      -4.64   4.60  6.57 -6.32 0  1.89  0
di                       10.35  10.30 -5.98 -6.03 0 -0.58  0
ticker.bbands.signals    -3.14   1.00  0.00  0.00 0  0.00  0
dn                        3.32   7.25 16.82 -1.93 0 -0.63  0
mavg                      4.17   3.70 12.06 -6.57 0 -0.38  0
up                       10.29   4.85  1.80 -8.06 0  0.58  0
pctB                      4.08   5.52 -2.07 -5.22 0 -3.47  0
mfi                      -9.44  -6.23 -2.45 -3.38 0 -2.65  0
Close.EMA.14              1.86  -3.67 -7.70 -7.69 0 -4.13  0
ticker.rsi.signals        4.19  -1.28 -0.75 -1.52 0  0.00  0
                        MeanDecreaseAccuracy MeanDecreaseGini
ticker.multisma.signals                 3.20             0.62
Close.SMA.20                           46.93            13.95
Close.SMA.50                           48.14            14.73
ticker.return.signals                   5.12             3.01
daily.returns                         302.79           238.60
Open                                   61.27            17.93
Close                                  59.22            17.64
High                                   47.51            15.33
Low                                    62.29            18.36
Volume                                 74.73            33.79
ticker.sma.signals                     33.08             4.24
tdi                                    16.98            16.69
di                                     31.62            18.49
ticker.bbands.signals                  -1.41             0.10
dn                                     49.53            15.83
mavg                                   46.16            13.95
up                                     39.28            15.12
pctB                                   63.16            24.73
mfi                                    26.39            17.56
Close.EMA.14                           65.69            22.72
ticker.rsi.signals                      7.00             0.60
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 0.02
[1] " calculating daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Loading required package: XML
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 21.43%
Confusion matrix:
     buy hold sell class.error
buy    5   49    8  0.91935484
hold  16  505   15  0.05783582
sell   1   52    7  0.88333333
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -6.09  -8.96  -5.77               -10.86
Close.SMA.20            -34.84  91.05 -18.61                87.73
Close.SMA.50            -25.01  85.01 -24.61                81.70
Close                     1.77 101.62 -32.86               100.81
daily.returns            -2.84  50.82 -43.81                30.46
ticker.sma.signals       -4.50   3.99   2.76                 3.17
tdi                     -23.71  71.01 -20.74                55.03
di                      -21.16 105.03  37.40               106.07
ticker.bbands.signals     0.00  -1.00   0.00                -1.00
dn                      -27.80  98.17 -20.73                95.81
mavg                    -34.88  91.38 -17.68                88.07
up                      -35.48  91.17  -6.29                88.65
pctB                     -2.51  83.11 -24.09                78.75
mfi                     -24.87  80.88 -14.76                70.21
Close.EMA.14             -9.82  89.90 -11.31                86.19
ticker.rsi.signals       -3.76  15.43  -6.97                12.93
                        MeanDecreaseGini
ticker.multisma.signals             1.59
Close.SMA.20                       15.07
Close.SMA.50                       13.87
Close                              21.88
daily.returns                      16.10
ticker.sma.signals                  0.90
tdi                                13.68
di                                 24.51
ticker.bbands.signals               0.02
dn                                 17.89
mavg                               15.01
up                                 16.30
pctB                               15.80
mfi                                17.27
Close.EMA.14                       19.44
ticker.rsi.signals                  0.32
Warning message:
package 'pmml' was built under R version 3.0.2 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
Error in data.frame(tickerTestData$ticker.return.signals, ticker.prediction,  : 
  arguments imply differing number of rows: 630, 0
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 0.02
[1] " calculating daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 21.12%
Confusion matrix:
     buy hold sell class.error
buy    4   51    7  0.93548387
hold  15  507   14  0.05410448
sell   1   51    8  0.86666667
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -5.39  -8.15  -4.77                -9.78
Close.SMA.20            -32.27  90.87 -19.11                87.73
Close.SMA.50            -25.08  85.67 -27.70                81.86
Close                     2.49 103.56 -31.99               102.89
daily.returns            -4.70  53.70 -43.40                32.09
ticker.sma.signals       -4.91   6.08   4.03                 5.13
tdi                     -26.15  68.64 -21.12                51.95
di                      -19.61 105.99  38.09               106.95
ticker.bbands.signals     0.00  -1.73   0.00                -1.73
dn                      -27.03  98.37 -20.81                96.12
mavg                    -34.90  90.67 -18.57                87.39
up                      -37.76  92.50  -5.97                89.33
pctB                     -1.08  83.98 -23.99                79.64
mfi                     -26.41  81.46 -13.68                71.14
Close.EMA.14             -7.91  88.86 -12.14                85.56
ticker.rsi.signals       -5.33  16.44  -8.11                13.16
                        MeanDecreaseGini
ticker.multisma.signals             1.60
Close.SMA.20                       15.05
Close.SMA.50                       14.02
Close                              21.55
daily.returns                      16.11
ticker.sma.signals                  0.93
tdi                                13.72
di                                 24.39
ticker.bbands.signals               0.02
dn                                 18.18
mavg                               15.02
up                                 16.57
pctB                               15.90
mfi                                17.19
Close.EMA.14                       19.38
ticker.rsi.signals                  0.34
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
Error in data.frame(tickerTestData$ticker.return.signals, ticker.prediction,  : 
  arguments imply differing number of rows: 630, 0
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 0.02
[1] " calculating daily return signals "
[1] " calculating daily return signals "
NULL
[1] 757
Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 20.52%
Confusion matrix:
     buy hold sell class.error
buy    5   50    7  0.91935484
hold  12  509   15  0.05037313
sell   3   48    9  0.85000000
                           buy  hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -4.77 -4.25  -4.96                -5.84
Close.SMA.20            -29.09 74.45 -22.25                70.56
Close.SMA.50            -22.02 73.14 -26.13                69.49
daily.returns            -2.34 52.14 -36.18                36.42
Open                    -17.64 77.74 -22.86                75.10
Close                     0.96 76.36 -26.59                75.76
High                    -13.65 74.50 -13.81                73.88
Low                     -18.06 77.45 -26.10                74.68
Volume                   -1.87 77.59 -27.53                67.40
ticker.sma.signals       -4.45  4.51   0.88                 3.18
tdi                     -23.10 57.52 -13.35                44.28
di                      -16.68 92.19  34.63                94.09
ticker.bbands.signals     0.00  2.24   0.00                 2.23
dn                      -23.78 82.94 -20.51                80.62
mavg                    -29.34 76.20 -22.53                72.21
up                      -32.24 70.06 -11.06                66.99
pctB                     -0.65 72.01 -18.22                69.45
mfi                     -19.52 70.63 -11.41                61.98
Close.EMA.14             -8.87 77.33  -4.73                75.21
ticker.rsi.signals       -4.80 11.26  -3.91                 9.02
                        MeanDecreaseGini
ticker.multisma.signals             1.48
Close.SMA.20                       10.56
Close.SMA.50                       10.55
daily.returns                      12.29
Open                               12.71
Close                              15.08
High                               13.89
Low                                13.65
Volume                             13.79
ticker.sma.signals                  0.75
tdi                                10.69
di                                 19.24
ticker.bbands.signals               0.02
dn                                 12.67
mavg                               10.77
up                                 11.44
pctB                               11.90
mfi                                13.11
Close.EMA.14                       14.74
ticker.rsi.signals                  0.26
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 757
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelPrices.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.factors ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 12.63%
Confusion matrix:
   -6 -5 -4 -3 -2  -1   0   1  2  3 4 5 6 7 10 class.error
-6  0  2  2  1  0   0   0   0  0  0 0 0 0 0  0  1.00000000
-5  0  2  2  4  1   0   0   0  0  0 0 0 0 0  0  0.77777778
-4  2  1  1  4  0   1   0   0  0  0 0 0 0 0  0  0.88888889
-3  0  1  1 15  4   4   0   0  0  0 0 0 0 0  0  0.40000000
-2  0  0  0  1 22  12   0   0  0  0 0 0 0 0  0  0.37142857
-1  0  0  0  1  2 122   0   0  0  0 0 0 0 0  0  0.02400000
0   0  0  0  0  0   0 217   0  0  0 0 0 0 0  0  0.00000000
1   0  0  0  0  0   0   0 136  0  1 0 0 0 0  0  0.00729927
2   0  0  0  0  0   0   0   4 43  3 0 0 0 0  0  0.14000000
3   0  0  0  0  0   0   0   1 10 14 2 0 0 0  0  0.48148148
4   0  0  0  0  0   0   0   1  0  4 2 1 0 1  0  0.77777778
5   0  0  0  0  0   0   0   0  2  1 2 0 0 0  0  1.00000000
6   0  0  0  0  0   0   0   0  0  1 0 0 0 0  0  1.00000000
7   0  0  0  0  0   0   0   0  0  1 1 0 0 0  0  1.00000000
10  0  0  0  0  0   0   0   1  0  0 0 0 0 0  0  1.00000000
                           -6    -5     -4     -3     -2     -1      0      1
ticker.multisma.signals  0.00  0.00   0.00  -4.47  -2.46  -4.14   5.70   5.50
Close.SMA.20            -2.48  8.75  -1.25  10.40  12.21  17.41  34.15  27.11
Close.SMA.50            -4.69  2.99  -5.29  15.06  11.78  20.87  35.40  23.42
ticker.return.signals    0.58 -6.44  15.30 -10.69  -3.17  -7.81  13.86   1.10
daily.returns           37.24 63.65  50.92 119.00 141.74 246.97 272.36 258.87
Open                    -6.18  4.26   3.51  14.13  15.62  32.84  46.85  35.97
Close                    6.43 10.60   9.88  23.31  18.57  24.26  46.00  36.07
High                    -1.58  1.70   7.88  14.66   9.84  23.83  35.04  31.98
Low                      2.70 11.98   5.82  21.08  14.63  28.92  47.37  35.82
Volume                  12.70 40.74  18.26  37.82  25.82   6.19  54.68  30.19
ticker.sma.signals       1.95  4.28  -2.05   5.90   2.28  25.97  25.59  12.43
tdi                      3.75  1.08  -3.22  -8.42   7.67   7.03  16.86  10.92
di                      13.17 13.83  25.67 -10.32   3.55  10.63  24.27  11.81
ticker.bbands.signals    0.00  0.00   0.00  -1.40   0.00   3.29  -2.09  -0.15
dn                       6.45  3.82   3.42   7.63   6.69  21.28  36.17  27.94
mavg                    -0.93  8.01   0.65  11.48  11.66  18.40  33.88  27.73
up                      -6.30  4.89   1.27  12.78  15.81  12.50  27.28  21.82
pctB                    11.33 33.24   4.59  24.37  19.65  20.50  42.67  39.05
mfi                      1.04 -8.65 -12.12   3.89   5.49   2.67  31.59  20.96
Close.EMA.14            17.78 25.62  13.74  28.14  22.97  13.41  47.26  44.47
ticker.rsi.signals       2.66 -1.88   2.50   5.33   2.73   3.84   3.60   1.85
                             2      3     4     5 6     7 10
ticker.multisma.signals  -2.88   2.42  0.00  0.00 0  0.00  0
Close.SMA.20              3.79   3.37 13.18 -6.89 0 -0.45  0
Close.SMA.50              9.20  -1.03  2.00 -4.50 0 -1.34  0
ticker.return.signals    12.29 -11.33 -1.39  0.20 0  1.00  0
daily.returns           155.94 116.85 51.23 18.17 0  3.32  0
Open                      6.99   3.06 19.10 -2.79 0 -3.77  0
Close                     5.74   0.75  8.17 -5.10 0 -3.15  0
High                      4.30  -4.24  7.87 -2.73 0 -2.89  0
Low                       7.39   8.79 19.07 -2.61 0 -4.96  0
Volume                   15.74  34.28  5.37 10.51 0  0.38  0
ticker.sma.signals       -4.27  13.43  4.91 -1.17 0  0.00  0
tdi                      -2.00   3.49  5.91 -4.40 0 -0.71  0
di                       10.92  10.20 -4.94 -6.38 0 -1.27  0
ticker.bbands.signals    -2.53   1.00  0.00  0.00 0  0.00  0
dn                        4.03   8.00 16.58 -2.82 0 -1.67  0
mavg                      1.88   3.02 12.21 -5.08 0  0.45  0
up                       10.21   4.55  2.65 -7.73 0 -1.00  0
pctB                      5.45   5.14 -1.11 -6.05 0 -3.61  0
mfi                      -9.46  -6.05  1.18 -3.66 0 -3.16  0
Close.EMA.14              1.08  -0.60 -7.57 -8.32 0 -4.48  0
ticker.rsi.signals        3.48  -0.46 -1.13  0.00 0  0.00  0
                        MeanDecreaseAccuracy MeanDecreaseGini
ticker.multisma.signals                 2.86             0.61
Close.SMA.20                           45.93            14.02
Close.SMA.50                           47.86            14.70
ticker.return.signals                   3.31             3.01
daily.returns                         300.69           237.72
Open                                   62.49            18.03
Close                                  59.91            17.60
High                                   49.52            15.40
Low                                    62.85            18.22
Volume                                 75.44            33.60
ticker.sma.signals                     32.24             4.32
tdi                                    19.04            16.60
di                                     32.93            18.71
ticker.bbands.signals                  -1.28             0.11
dn                                     50.67            16.14
mavg                                   46.58            14.00
up                                     40.71            15.31
pctB                                   62.40            24.65
mfi                                    26.79            17.64
Close.EMA.14                           64.68            22.89
ticker.rsi.signals                      7.08             0.61
Warning message:
'memory.limit()' is Windows-specific 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$daily.returns, ticker.prediction,tickerTestData$ticker.return.signals,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]+100)* tickerTestData[i]
+ 			}
Error in `[.data.frame`(tickerTestData, i) : undefined columns selected
In addition: There were 29 warnings (use warnings() to see them)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]+100)* tickerTestData[i]
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]+100)* tickerTestData$Close[i]
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]+100)* tickerTestData.Close[i]
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100)+ tickerTestData$Close[i]
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] = ((ticker.prediction[i]*100) + tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- num()
Error: could not find function "num"
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- vector()
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  arguments imply differing number of rows: 611, 0
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- vector(nrow(ticker.prediction))
Error in vector(nrow(ticker.prediction)) : invalid 'mode' argument
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  arguments imply differing number of rows: 611, 0
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- (nrow(ticker.prediction))
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  arguments imply differing number of rows: 611, 0
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(ticker.prediction))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
Error in 1:nrow(ticker.prediction) : argument of length 0
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				ticker.close.prediction[i] <- (ticker.prediction[i]*100) + (tickerTestData$Close[i])
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				ticker.close.prediction[i] <- ((ticker.prediction[i]+100)/100) + (tickerTestData$Close[i])
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				ticker.close.prediction[i] <- ((ticker.prediction[i]+100)/100) + (tickerTestData$Close[i])
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> warnings()
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				#ticker.close.prediction[i] <- ((ticker.prediction[i]+100)/100) + (tickerTestData$Close[i])
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction[i]
+ 				percentincrease <- (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] <-   (tickerTestData$Close[i] + percentincrease)
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> 		for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(ticker.prediction)		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> predictStartDate<-20110101
> predictEndDate<-20131028
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns, ticker.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
> q()
Save workspace image? [y/n/c]: n

[INFO] Nov 28, 2013 3:23:25 PM - R stopped.
