##------ Dec 8, 2013 4:42:45 AM ------##

R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> cat("welcome to CRAN-R")
welcome to CRAN-R> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> library(randomForest)
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: 'zoo'

The following object is masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> library(TTR)
> library(tseries)

    'tseries' version: 0.10-32

    'tseries' is a package for time series analysis and computational
    finance.

    See 'library(help="tseries")' for details.

> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
Error in paste("http://ichart.finance.yahoo.com/table.csv?s=", symbol,  : 
  object 'tickerSymbol' not found
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Loading required package: XML
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaMultiSmaSignal' not found
In addition: Warning message:
package 'pmml' was built under R version 3.0.2 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
Error in paste("http://ichart.finance.yahoo.com/table.csv?s=", symbol,  : 
  object 'tickerSymbol' not found
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.006906986 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> tickerSymbol <- "IBM"
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 3017
Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 9.73%
Confusion matrix:
     buy hold sell class.error
buy    1  126    8 0.992592593
hold  12 2627   14 0.009800226
sell   3  121    6 0.953846154
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals   2.68  18.18  -7.79                17.51
Close.SMA.20            -49.37 115.76 -53.67               114.28
Close.SMA.50            -50.56 111.38 -45.65               110.11
daily.returns            -3.40  68.62 -31.87                61.46
Open                    -43.56 109.41 -51.69               108.09
Close                   -51.57 114.87 -50.69               113.25
High                    -47.03 109.74 -46.66               108.55
Low                     -41.34 112.52 -52.37               111.23
Volume                    8.46 129.40   4.39               130.93
ticker.sma.signals       -5.72  28.51  -3.35                27.88
tdi                      -0.55  93.17 -24.65                88.93
di                       -1.89 125.19  12.35               126.90
ticker.bbands.signals    -2.90  -2.22  -1.04                -2.65
dn                      -35.10 112.74 -56.83               111.64
mavg                    -49.14 115.92 -52.37               114.61
up                      -48.23 107.91 -50.65               106.35
pctB                    -13.77  96.04 -27.74                94.63
mfi                     -22.08 128.45 -25.32               125.18
Close.EMA.14            -23.70 107.76 -31.25               106.52
ticker.rsi.signals       -0.49  19.85  -9.14                18.96
                        MeanDecreaseGini
ticker.multisma.signals             3.09
Close.SMA.20                       28.48
Close.SMA.50                       28.59
daily.returns                      17.51
Open                               27.99
Close                              27.95
High                               27.28
Low                                28.30
Volume                             50.24
ticker.sma.signals                  1.79
tdi                                33.63
di                                 40.14
ticker.bbands.signals               0.81
dn                                 28.76
mavg                               28.49
up                                 26.36
pctB                               29.91
mfi                                32.35
Close.EMA.14                       31.02
ticker.rsi.signals                  1.15
Time difference of 296.8688 secs
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 230
[1] "removing rows containing NA from test data"
[1] "dropping unused levels"
[1] 131
Error in predict.randomForest(ticker.rfmodel, tickerTestData) : 
  Type of predictors in new data do not match that of the training data.
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 308.6574 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> tickerSymbol <- "IBM"
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 2767
Warning message:
'memory.limit()' is Windows-specific 
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 10.34%
Confusion matrix:
     buy hold sell class.error
buy    2  121    8  0.98473282
hold  13 2384   14  0.01119867
sell   3  117    6  0.95238095
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals   3.73  20.11  -5.93                19.68
Close.SMA.20            -47.29 115.04 -52.18               113.59
Close.SMA.50            -47.40 107.11 -43.14               105.76
daily.returns            -1.95  66.25 -31.21                59.34
Open                    -40.53 107.54 -47.41               106.24
Close                   -46.81 110.18 -48.66               108.62
High                    -43.53 106.00 -44.69               104.91
Low                     -40.60 111.21 -52.86               109.79
Volume                    9.68 114.15  -4.89               113.74
ticker.sma.signals       -8.63  19.31  -3.84                18.28
tdi                      -0.71  91.31 -25.39                86.64
di                        0.92 136.58  12.64               137.95
ticker.bbands.signals    -3.01  -3.80  -0.88                -4.25
dn                      -33.09 110.80 -54.80               109.34
mavg                    -45.35 114.84 -49.62               113.53
up                      -44.76 106.05 -45.60               104.65
pctB                    -16.79  99.33 -26.85                98.11
mfi                     -22.61 123.32 -23.15               120.29
Close.EMA.14            -20.17 105.91 -29.50               104.91
ticker.rsi.signals       -0.33  21.31  -8.11                20.65
                        MeanDecreaseGini
ticker.multisma.signals             3.14
Close.SMA.20                       27.58
Close.SMA.50                       28.04
daily.returns                      16.55
Open                               26.95
Close                              26.56
High                               26.99
Low                                27.35
Volume                             46.44
ticker.sma.signals                  1.47
tdi                                32.20
di                                 40.75
ticker.bbands.signals               0.77
dn                                 27.69
mavg                               27.87
up                                 26.03
pctB                               29.01
mfi                                30.28
Close.EMA.14                       30.14
ticker.rsi.signals                  1.07
Time difference of 373.2394 secs
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerSignals.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] "dropping unused levels"
[1] 381
[1] "print csv"
[1] "paste csv"
[1] "printed csv"
> 
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 378.1298 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 2767
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 15.89%
Confusion matrix:
     buy hold sell class.error
buy   10  187    8  0.95121951
hold  20 2230   19  0.01718819
sell   6  184    4  0.97938144
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals   0.14  12.39  -0.22                11.92
Close.SMA.20            -49.31 125.69 -55.93               123.42
Close.SMA.50            -43.10 121.15 -57.35               118.74
daily.returns            -2.82  92.46 -36.28                83.27
Open                    -35.76 120.33 -52.47               118.70
Close                   -51.51 121.13 -54.90               118.56
High                    -47.72 118.22 -51.90               116.00
Low                     -42.85 122.97 -52.58               121.07
Volume                   35.85 143.85 -11.94               144.83
ticker.sma.signals       -1.54   6.11  -6.02                 4.57
tdi                      -8.40  97.66 -18.26                91.12
di                      -11.46 158.66   3.25               157.33
ticker.bbands.signals     0.19  -6.40  -1.46                -6.38
dn                      -36.69 135.45 -61.97               133.62
mavg                    -47.86 124.63 -55.47               122.35
up                      -41.18 115.65 -55.40               114.14
pctB                    -23.05 119.16 -40.03               116.05
mfi                     -27.05 141.31 -31.17               136.35
Close.EMA.14            -21.82 116.52 -39.10               114.62
ticker.rsi.signals        5.71  19.68 -15.23                18.45
                        MeanDecreaseGini
ticker.multisma.signals             4.34
Close.SMA.20                       37.59
Close.SMA.50                       39.84
daily.returns                      46.65
Open                               38.18
Close                              36.97
High                               36.53
Low                                38.44
Volume                             72.42
ticker.sma.signals                  2.40
tdi                                43.74
di                                 58.16
ticker.bbands.signals               1.03
dn                                 40.25
mavg                               37.39
up                                 40.04
pctB                               42.91
mfi                                45.99
Close.EMA.14                       43.90
ticker.rsi.signals                  1.51
Time difference of 202.0819 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error: could not find function "auto.arima"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 206.9968 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- c(tickerTestData$daily.returns,tickerTestDara$ticker.return.signals,ticker.prediction)
Error: object 'tickerTestDara' not found
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- c(tickerTestData$daily.returns,tickerTestDara$ticker.return.signals,ticker.prediction)
Error: object 'tickerTestDara' not found
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- as.data.frame(tickerTestData$daily.returns,tickerTestDara$ticker.return.signals,ticker.prediction)
Error in as.data.frame.numeric(tickerTestData$daily.returns, tickerTestDara$ticker.return.signals,  : 
  object 'tickerTestDara' not found
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- as.data.frame(tickerTestData$daily.returns,tickerTestDara$ticker.return.signals,ticker.prediction)
Error in as.data.frame.numeric(tickerTestData$daily.returns, tickerTestDara$ticker.return.signals,  : 
  object 'tickerTestDara' not found
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- as.data.frame(tickerTestData$daily.returns,tickerTestData$ticker.return.signals,ticker.prediction)
Error in if (!optional) names(value) <- nm : 
  missing value where TRUE/FALSE needed
In addition: Warning messages:
1: In Ops.factor(optional) : ! not meaningful for factors
2: In if (!optional) names(value) <- nm :
  the condition has length > 1 and only the first element will be used
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,tickerTestData$ticker.return.signals,ticker.prediction)
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error: could not find function "auto.arima"
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  object 'ticker.arima' not found
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
Error in names(csvData)[names(csvData) == "ticker.close.prediction"] <- "predicted price" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
Error in names(csvData)[names(csvData) == "tickerTestData.daily.returns"] <- "actual returns %" : 
  object 'csvData' not found
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
Error in names(csvData)[names(csvData) == "ticker.arima"] <- "predicted returns %" : 
  object 'csvData' not found
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
Error in names(csvData)[names(csvData) == "tickerTestData.ticker.return.signals"] <- "recommendation signals" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
Error in names(csvData)[names(csvData) == "tickerTestData.Open"] <- "open" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
Error in names(csvData)[names(csvData) == "tickerTestData.High"] <- "high" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
Error in names(csvData)[names(csvData) == "tickerTestData.Low"] <- "low" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
Error in names(csvData)[names(csvData) == "tickerTestData.Close"] <- "close" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
Error in names(csvData)[names(csvData) == "tickerTestData.Volume"] <- "volume" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.20"] <- "20 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
Error in names(csvData)[names(csvData) == "tickerTestData.Close.SMA.50"] <- "50 day sma" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
Error in names(csvData)[names(csvData) == "tickerTestData.dn"] <- "lower bband " : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
Error in names(csvData)[names(csvData) == "tickerTestData.up"] <- "higher bband" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
Error in names(csvData)[names(csvData) == "tickerTestData.mavg"] <- "mavg" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
Error in names(csvData)[names(csvData) == "tickerTestData.pctB"] <- "bband pctb" : 
  object 'csvData' not found
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
Error in names(csvData)[names(csvData) == "tickerTestData.mfi"] <- "money flow index" : 
  object 'csvData' not found
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
Error in is.data.frame(x) : object 'csvData' not found
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 2767
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 15.97%
Confusion matrix:
     buy hold sell class.error
buy   10  188    7  0.95121951
hold  21 2229   19  0.01762891
sell   7  184    3  0.98453608
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals   2.15   9.95  -1.92                 9.74
Close.SMA.20            -48.24 124.82 -56.30               122.58
Close.SMA.50            -41.83 119.86 -56.56               117.60
daily.returns            -3.43  91.41 -36.66                81.91
Open                    -35.82 117.59 -51.06               116.24
Close                   -49.87 121.26 -55.46               118.78
High                    -46.67 120.68 -52.22               118.41
Low                     -41.08 124.43 -52.83               122.46
Volume                   34.73 143.81 -10.89               145.83
ticker.sma.signals       -1.10   5.89  -6.44                 4.47
tdi                      -8.79  96.02 -18.07                89.91
di                      -10.49 156.71   2.91               155.87
ticker.bbands.signals     2.55  -5.26  -0.18                -4.33
dn                      -36.27 134.28 -62.56               132.34
mavg                    -48.72 127.27 -55.90               124.83
up                      -42.39 117.35 -53.18               115.78
pctB                    -22.93 120.51 -39.48               116.99
mfi                     -25.47 140.98 -31.76               135.79
Close.EMA.14            -21.16 114.48 -40.84               112.03
ticker.rsi.signals        5.46  18.46 -15.29                16.81
                        MeanDecreaseGini
ticker.multisma.signals             4.32
Close.SMA.20                       37.59
Close.SMA.50                       39.68
daily.returns                      46.62
Open                               38.22
Close                              37.15
High                               36.60
Low                                38.78
Volume                             71.90
ticker.sma.signals                  2.34
tdi                                43.78
di                                 58.11
ticker.bbands.signals               1.16
dn                                 40.31
mavg                               37.42
up                                 40.23
pctB                               42.76
mfi                                45.86
Close.EMA.14                       43.72
ticker.rsi.signals                  1.52
Time difference of 240.7021 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error: could not find function "auto.arima"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 243.3361 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnsAbsolute.R")
Error in file(filename, "r", encoding = encoding) : 
  cannot open the connection
In addition: Warning message:
In file(filename, "r", encoding = encoding) :
  cannot open file '/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnsAbsolute.R': No such file or directory
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
Error in eval(expr, envir, enclos) : 
  could not find function "getPeriodReturnSignals"
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
[1] "Training Random Forest Model from training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaMultiSmaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
Error in eval(expr, envir, enclos) : 
  could not find function "getPeriodReturnSignals"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 0.2339578 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 0.34%
Confusion matrix:
     buy hold sell class.error
buy  123    2    3   0.0390625
hold   0 2411    0   0.0000000
sell   1    3  121   0.0320000
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -8.68   6.50  -9.65                 0.32
Close.SMA.20              5.15  40.78  -6.71                40.78
Close.SMA.50             -1.35  38.99   3.45                39.08
daily.returns            -1.71  25.83 -14.43                17.58
ticker.return.factors   318.87 472.34 296.44               424.88
Open                      2.67  38.39  -0.60                38.56
Close                    -1.96  38.81  -1.08                38.66
High                     -1.78  38.29   1.02                38.27
Low                       3.27  41.40  -6.08                41.16
Volume                    1.54  38.97   6.33                29.23
ticker.sma.signals        0.11  10.22  -2.55                 9.51
tdi                      -1.50  36.90 -16.73                25.62
di                      -11.39  54.37  -6.96                45.61
ticker.bbands.signals     2.22  -0.72   1.35                -0.07
dn                        5.78  38.11  -7.48                38.07
mavg                      3.16  40.63  -4.81                40.53
up                        8.87  35.85  -0.53                36.40
pctB                      4.72  30.51  -4.04                29.31
mfi                      -4.80  40.18  -2.26                36.14
Close.EMA.14              5.74  35.91  -0.69                35.93
ticker.rsi.signals        0.60  12.34  -7.76                10.10
                        MeanDecreaseGini
ticker.multisma.signals             0.62
Close.SMA.20                        8.97
Close.SMA.50                        8.20
daily.returns                       5.69
ticker.return.factors             316.28
Open                                8.43
Close                               8.60
High                                8.44
Low                                 8.74
Volume                             16.93
ticker.sma.signals                  0.35
tdi                                10.29
di                                 15.18
ticker.bbands.signals               0.25
dn                                  8.43
mavg                                8.83
up                                  7.53
pctB                                8.91
mfi                                 8.79
Close.EMA.14                        9.56
ticker.rsi.signals                  0.62
Time difference of 167.062 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error: could not find function "auto.arima"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 169.3336 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> 
> 
> arimaPricePrediction <- function(ret,predictionsignals)
+ {
+ 
+ winsize <- 30
+ 
+ #ret <- getPeriodReturnSignals(d,"daily",2)
+ x <- as.ts(ret$daily.returns)
+ ##fit <- auto.arima(x)
+ #f1 <- forecast(fit,h=200)
+ #plot(f1)
+ 
+ 
+ start <- 1
+ end <- nrow(ret)
+ pred <- nrow(ret)
+ 
+ pred <-NULL
+ 
+ for(i in 1:nrow(ret)+1)
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	
+ 	predictedrange <- cbind(f$lower,f$upper,f$mean)
+ 	pred<- rbind(pred,predictedrange)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
+ 
+ ret1 <- as.data.frame(cbind(pred,ret))
+ 
+ 
+ for(i in 1:4)
+ {
+ 	ret1[,i] <- (round(ret1[,i]))
+ }
+ 
+ 
+ predicted.price.percent <- nrow(ret1)
+ 
+ # arima and random forest integration
+ for(i in 1:nrow(ret1))
+ {
+ 	if(predictionsignals[i] == "buy")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,3]+ret1[i,4])/2
+ 	}
+ 	if(predictionsignals[i] == "hold")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,2]+ret1[i,3])/2
+ 	}
+ 	if(predictionsignals[i] == "sell")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,1]+ret1[i,2])/2
+ 	}
+ 	
+ }
+ 
+ #predicted.price <- round(predicted.price)
+ 
+ return (predicted.price.percent)
+ 
+ 
+ #plot(f)
+ 
+ 
+ 
+ #fit1 <- bats(x)
+ #f1<-forecast(fit1)
+ #plot(f1)
+ 
+ #fit2 <- nnetar(x)
+ #f2<-forecast(fit2,h=200)
+ #plot(f2)
+ 	
+ }
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in nrow(sma.20) : object 'sma.20' not found
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
[1] "Training Random Forest Model from training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.763182 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in if (diff.preventry < 0 && diff.currententry > 0) { : 
  missing value where TRUE/FALSE needed
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
[1] "Training Random Forest Model from training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.55043 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Error in if (diff.preventry < 0 && diff.currententry > 0) { : 
  missing value where TRUE/FALSE needed
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
[1] "Training Random Forest Model from training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.504336 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.563433 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
Error in cbind(smaMultiSmaSignal, smaSignal20, smaSignal40, smaSignal50,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.495219 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"
Error in terms.formula(formula, data = data) : 
  duplicated name 'ticker.sma.signals' in data frame using '.'
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.640098 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"
Error in terms.formula(formula, data = data) : 
  duplicated name 'tdi' in data frame using '.'
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.689868 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "NULL"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.626578 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"
Error in terms.formula(formula, data = data) : 
  duplicated name 'tdi' in data frame using '.'
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.619891 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> tdi <- TDI(ticker[,"Close"], n=avg.period)  # trend 
Error in diff.xts(x, n, na.pad = na.pad) : object 'avg.period' not found
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "c('double', 'numeric')"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.567022 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "c('double', 'numeric')"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.536232 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "NULL"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.623983 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "c('double', 'numeric')"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.545928 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
Error in UseMethod("droplevels") : 
  no applicable method for 'droplevels' applied to an object of class "c('double', 'numeric')"
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.573829 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 2767
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 0.38%
Confusion matrix:
     buy hold sell class.error
buy  123    2    3   0.0390625
hold   0 2411    0   0.0000000
sell   2    3  120   0.0400000
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -9.08   5.53  -8.63                -1.18
Close.SMA.20              4.91  47.93  -5.83                47.97
Close.SMA.50              3.08  50.03   5.78                50.35
tickersma1                4.08  10.78   0.05                11.30
tickersma2               -1.24   0.73  -1.04                 0.05
tickersma3               -2.33  12.12  -1.52                10.30
tickersma4                4.05   1.49  -2.52                 1.92
daily.returns             1.35  35.31 -14.87                28.03
ticker.return.factors   298.15 432.36 284.42               391.55
Open                      3.65  46.56   0.08                46.82
Close                     2.28  46.45   3.11                46.86
High                      1.11  45.14   1.99                45.43
Low                       5.41  48.77  -2.39                49.01
Volume                    2.24  41.28   1.79                30.01
ticker.bbands.signals     3.26  -2.88   0.03                -2.29
dn                        9.84  46.51 -10.30                46.56
mavg                      6.24  48.27  -5.74                48.35
up                       11.77  44.20   1.59                44.93
pctB                      6.18  35.16  -5.16                34.28
mfi                      -8.82  47.26   0.46                42.86
Close.EMA.14              7.43  41.72  -2.21                41.98
ticker.rsi.signals        0.02  15.69 -10.38                12.91
                        MeanDecreaseGini
ticker.multisma.signals             0.80
Close.SMA.20                       10.86
Close.SMA.50                       10.61
tickersma1                          0.42
tickersma2                          0.35
tickersma3                          0.47
tickersma4                          0.40
daily.returns                       7.09
ticker.return.factors             312.62
Open                               10.35
Close                              10.40
High                               10.31
Low                                10.65
Volume                             19.12
ticker.bbands.signals               0.29
dn                                 10.43
mavg                               10.95
up                                  9.66
pctB                               10.43
mfi                                10.37
Close.EMA.14                       11.89
ticker.rsi.signals                  0.87
Time difference of 283.6757 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in eval(expr, envir, enclos) : object 'tickersma1' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 287.9533 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 1009
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 19.34%
Confusion matrix:
     buy hold sell class.error
buy    4   75    5   0.9523810
hold  12  723   15   0.0360000
sell   1   68    7   0.9078947
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -3.83  -1.69   0.72                -2.73
Close.SMA.20            -32.26  99.68 -32.77                96.48
Close.SMA.50            -21.87  94.03 -35.72                90.88
tickersma1                2.31   6.52  -3.54                 6.21
tickersma2               -1.63  -3.46  -3.81                -4.70
tickersma3                0.56  14.37  10.59                16.83
tickersma4               -7.14  -6.25  -6.88                -9.20
daily.returns            -6.16  62.94 -38.60                46.87
Open                    -27.44  96.05 -26.48                93.63
Close                   -12.13  96.52 -29.96                95.43
High                    -26.42  98.49 -21.50                97.15
Low                     -32.05 101.81 -27.89                99.23
Volume                    0.48 114.04 -27.05               107.64
ticker.bbands.signals     2.41   7.62  -3.85                 6.75
dn                      -29.80  99.15 -26.55                96.67
mavg                    -33.60  98.24 -33.02                95.03
up                      -37.30  93.97 -19.62                91.26
pctB                     -3.81  81.54 -23.03                79.10
mfi                     -17.55  74.31 -22.42                64.64
Close.EMA.14             -8.91  86.56  -4.17                85.69
ticker.rsi.signals       -7.90  11.34  -4.61                 8.49
                        MeanDecreaseGini
ticker.multisma.signals             1.73
Close.SMA.20                       17.02
Close.SMA.50                       18.65
tickersma1                          1.15
tickersma2                          0.63
tickersma3                          1.43
tickersma4                          0.74
daily.returns                      18.25
Open                               18.64
Close                              20.48
High                               19.90
Low                                19.74
Volume                             22.61
ticker.bbands.signals               0.21
dn                                 18.89
mavg                               16.95
up                                 18.86
pctB                               18.65
mfi                                19.96
Close.EMA.14                       21.70
ticker.rsi.signals                  0.47
Time difference of 31.93996 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error in eval(expr, envir, enclos) : object 'tickersma1' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 33.70325 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 1009
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 19.01%
Confusion matrix:
     buy hold sell class.error
buy    6   73    5  0.92857143
hold  11  724   15  0.03466667
sell   1   68    7  0.90789474
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -3.32  -4.01  -1.33                -4.97
Close.SMA.20            -32.53  98.76 -32.85                95.54
Close.SMA.50            -23.57  94.15 -33.28                91.24
tickersma1              -10.28  13.91  -5.64                 9.78
tickersma2                4.17  -6.47   1.06                -4.14
tickersma3                2.20  30.99  -3.40                28.86
tickersma4                1.40   9.49  -2.43                 8.96
daily.returns            -4.48  62.78 -39.97                47.09
Open                    -28.69  96.48 -25.80                93.66
Close                   -13.61  96.34 -30.16                95.55
High                    -26.18  97.78 -19.45                96.83
Low                     -30.54 100.46 -27.69                98.01
Volume                   -1.00 113.90 -28.10               106.34
ticker.bbands.signals     2.22   7.98  -3.73                 6.94
dn                      -30.14  99.84 -28.46                97.40
mavg                    -31.11  98.17 -34.60                94.87
up                      -36.54  94.78 -19.38                91.98
pctB                     -4.97  80.52 -21.78                77.98
mfi                     -18.13  75.76 -24.04                65.68
Close.EMA.14             -8.24  87.15  -3.32                86.45
ticker.rsi.signals       -7.68  13.13  -5.34                10.63
                        MeanDecreaseGini
ticker.multisma.signals             1.79
Close.SMA.20                       16.89
Close.SMA.50                       18.49
tickersma1                          1.80
tickersma2                          1.44
tickersma3                          2.83
tickersma4                          0.81
daily.returns                      18.17
Open                               18.44
Close                              20.38
High                               19.30
Low                                19.58
Volume                             22.49
ticker.bbands.signals               0.19
dn                                 18.62
mavg                               16.96
up                                 18.62
pctB                               18.28
mfi                                19.99
Close.EMA.14                       21.35
ticker.rsi.signals                  0.46
Time difference of 32.70264 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error in eval(expr, envir, enclos) : object 'tickersma1' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 34.4073 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 1009
Error in if ((ticker.open[i] < ticker.sma[i]) && (ticker.close[i] > ticker.sma[i]) &&  : 
  missing value where TRUE/FALSE needed
In addition: Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
[1] "Training Random Forest Model from training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
Error in cbind(smaMultiSmaSignal, smaSignal20, smaSignal40, smaSignal50,  : 
  object 'smaSignal20' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.470549 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturns.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 1009
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 19.23%
Confusion matrix:
     buy hold sell class.error
buy    5   74    5  0.94047619
hold  11  724   15  0.03466667
sell   2   68    6  0.92105263
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -4.28  -3.05  -1.26                -4.34
Close.SMA.20            -33.25 100.06 -32.27                96.76
Close.SMA.50            -24.17  95.53 -34.88                92.13
tickersma1               -9.99  15.90  -6.79                11.88
tickersma2                6.21  -6.44   1.03                -3.19
tickersma3                4.22  31.58  -3.53                30.11
tickersma4               -1.09   7.62  -4.72                 5.98
daily.returns            -3.06  61.75 -38.03                46.91
Open                    -27.60  95.23 -27.16                92.72
Close                   -10.95  95.23 -29.99                94.35
High                    -26.00  97.09 -21.74                96.08
Low                     -31.36  99.63 -28.39                97.34
Volume                    0.10 110.62 -30.06               102.97
ticker.bbands.signals     1.98   7.46  -3.95                 6.41
dn                      -29.90  99.04 -26.31                96.47
mavg                    -31.40  99.41 -33.66                95.94
up                      -37.63  94.35 -17.93                91.73
pctB                     -4.36  81.33 -23.52                78.86
mfi                     -16.07  75.64 -23.67                66.52
Close.EMA.14             -7.96  86.83  -1.70                86.42
ticker.rsi.signals       -5.97  13.42  -6.42                10.53
                        MeanDecreaseGini
ticker.multisma.signals             1.80
Close.SMA.20                       17.00
Close.SMA.50                       18.42
tickersma1                          1.79
tickersma2                          1.45
tickersma3                          2.80
tickersma4                          0.81
daily.returns                      18.13
Open                               18.33
Close                              20.25
High                               19.29
Low                                19.70
Volume                             22.47
ticker.bbands.signals               0.20
dn                                 18.71
mavg                               16.97
up                                 18.56
pctB                               18.27
mfi                                19.99
Close.EMA.14                       21.55
ticker.rsi.signals                  0.48
Time difference of 33.39924 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily return signals "
[1] " calculated percent daily returns "
[1] " calculating daily return signals "
NULL
[1] 480
[1] "removing rows containing NA from test data"
[1] 381
Error in eval(expr, envir, enclos) : object 'tickersma1' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 35.06441 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignalsNew.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1009
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestWithNewMultiSMA.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 1.1%
Confusion matrix:
     buy hold sell class.error
buy   50    4    2  0.10714286
hold   0  795    0  0.00000000
sell   1    3   54  0.06896552
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -6.79  -0.39  -1.85                -2.96
Close.SMA.20              0.94  49.28  -5.44                48.81
Close.SMA.50             -1.72  48.64  -8.97                47.18
tickersma1               -0.74   0.92   0.75                 0.74
tickersma2                6.17  -0.18   7.64                 5.59
tickersma3               -2.46  11.46  -0.63                 9.44
tickersma4                8.17   9.36  -2.85                10.23
daily.returns            -2.68  21.65 -17.46                 8.82
ticker.return.factors   184.48 254.70 191.99               254.06
Open                      8.67  47.01  -4.13                47.45
Close                    11.04  47.95   0.04                48.84
High                      4.99  49.81   3.24                50.45
Low                       6.84  52.76   0.98                53.27
Volume                   -4.07  48.77  -3.04                41.08
ticker.bbands.signals     2.60   6.13  -3.54                 5.33
dn                        4.31  43.03   2.33                43.51
mavg                      1.31  49.15  -4.29                49.05
up                       -4.44  43.69   6.46                43.92
pctB                      7.23  30.43  -3.93                29.25
mfi                      -6.97  33.82 -10.67                22.72
Close.EMA.14              5.31  45.65   4.74                44.96
ticker.rsi.signals       -5.63  10.55   0.33                 8.72
                        MeanDecreaseGini
ticker.multisma.signals             0.58
Close.SMA.20                        5.92
Close.SMA.50                        6.12
tickersma1                          0.58
tickersma2                          0.64
tickersma3                          0.44
tickersma4                          0.22
daily.returns                       3.42
ticker.return.factors             107.29
Open                                7.49
Close                               8.72
High                                8.35
Low                                 8.73
Volume                              7.75
ticker.bbands.signals               0.14
dn                                  6.63
mavg                                6.02
up                                  5.83
pctB                                6.09
mfi                                 6.71
Close.EMA.14                        8.33
ticker.rsi.signals                  0.28
Time difference of 39.67634 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in eval(expr, envir, enclos) : object 'tickersma1' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 41.36916 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1009
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
Error in cbind(smaMultiSmaSignal, tickerDailySignal, smaSignal, bbandSignal,  : 
  object 'smaSignal' not found
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error in predict(ticker.rfmodel, tickerTestData) : 
  object 'ticker.rfmodel' not found
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 1.58471 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1009
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 0.99%
Confusion matrix:
     buy hold sell class.error
buy   50    4    2  0.10714286
hold   0  795    0  0.00000000
sell   1    2   55  0.05172414
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -5.77  -1.12  -2.11                -3.35
Close.SMA.20              2.72  45.13  -5.42                44.72
Close.SMA.50             -1.29  44.90  -9.20                43.19
daily.returns            -2.38  19.81 -16.80                 7.49
ticker.return.factors   204.10 292.71 209.27               286.88
Open                      9.51  43.87  -3.47                44.24
Close                    11.00  45.03   0.87                46.17
High                      4.41  46.86   4.16                47.19
Low                       4.74  49.42   1.00                49.78
Volume                   -3.86  44.64  -3.79                37.44
ticker.sma.signals        7.75   7.94  -1.79                 8.87
ticker.bbands.signals     1.41   6.07  -1.95                 5.91
dn                        4.00  39.86   3.08                40.38
mavg                      3.04  45.83  -5.40                45.34
up                       -5.27  39.77   4.46                39.53
pctB                      6.22  27.43  -4.81                25.47
mfi                      -9.14  32.31  -9.46                19.80
Close.EMA.14              5.21  41.44   4.66                41.28
ticker.rsi.signals       -7.67  10.06  -1.94                 6.92
                        MeanDecreaseGini
ticker.multisma.signals             0.50
Close.SMA.20                        5.09
Close.SMA.50                        5.40
daily.returns                       3.10
ticker.return.factors             116.56
Open                                6.88
Close                               8.53
High                                8.02
Low                                 8.23
Volume                              7.23
ticker.sma.signals                  0.20
ticker.bbands.signals               0.11
dn                                  6.08
mavg                                5.14
up                                  5.29
pctB                                5.68
mfi                                 6.06
Close.EMA.14                        7.84
ticker.rsi.signals                  0.21
Time difference of 38.43248 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 381
Error: could not find function "auto.arima"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 40.30142 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> library(forecast)
This is forecast 4.8 

> 
> 
> 
> arimaPricePrediction <- function(ret,predictionsignals)
+ {
+ 
+ winsize <- 30
+ 
+ #ret <- getPeriodReturnSignals(d,"daily",2)
+ x <- as.ts(ret$daily.returns)
+ ##fit <- auto.arima(x)
+ #f1 <- forecast(fit,h=200)
+ #plot(f1)
+ 
+ 
+ start <- 1
+ end <- nrow(ret)
+ pred <- nrow(ret)
+ 
+ pred <-NULL
+ 
+ for(i in 1:nrow(ret)+1)
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	
+ 	predictedrange <- cbind(f$lower,f$upper,f$mean)
+ 	pred<- rbind(pred,predictedrange)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
+ 
+ ret1 <- as.data.frame(cbind(pred,ret))
+ 
+ 
+ for(i in 1:4)
+ {
+ 	ret1[,i] <- (round(ret1[,i]))
+ }
+ 
+ 
+ predicted.price.percent <- nrow(ret1)
+ 
+ # arima and random forest integration
+ for(i in 1:nrow(ret1))
+ {
+ 	if(predictionsignals[i] == "buy")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,3]+ret1[i,4])/2
+ 	}
+ 	if(predictionsignals[i] == "hold")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,2]+ret1[i,3])/2
+ 	}
+ 	if(predictionsignals[i] == "sell")
+ 	{
+ 		predicted.price.percent[i] <- (ret1[i,1]+ret1[i,2])/2
+ 	}
+ 	
+ }
+ 
+ #predicted.price <- round(predicted.price)
+ 
+ return (predicted.price.percent)
+ 
+ 
+ #plot(f)
+ 
+ 
+ 
+ #fit1 <- bats(x)
+ #f1<-forecast(fit1)
+ #plot(f1)
+ 
+ #fit2 <- nnetar(x)
+ #f2<-forecast(fit2,h=200)
+ #plot(f2)
+ 	
+ }
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> ticker.arima <- round(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> as.environment(".GlobalEnv")$getPeriodReturnSignals
function(ticker,timeFrequency,percent) 
{	
	#percent.absolute <- (percent/100)
	percent.absolute <- percent
	print(percent.absolute)
	print(" calculating daily returns ")
	
	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
	
	for(k in 1:nrow(ticker.return))
	{
		ticker.return[k] <- ticker.return[k] * 100
	}
	print(" calculated percent daily returns ")
	#rounding the returns
	ticker.return <- round(ticker.return)
	
	
	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
	ticker.return.signals <- (nrow(ticker.return))
	
	print(" ticker.return.signals")
	
	print(nrow(ticker.return.signals))
	
	print(" calculating daily return signals ")
	
	
	print(" ticker ")
	print(nrow(ticker))
	n<-nrow(ticker)
	
	
	for(i in 2:n)
	{
	
		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
		
		if(ticker.return[i] > percent.absolute)
		{
			#print("buy")
			ticker.return.signals[i-1] <- "buy"
			
		}
		else if(ticker.return[i] < -percent.absolute)
		{	
			#print("sell")
			ticker.return.signals[i-1] <- "sell"
		}
		else
		{
			#print("hold")
			ticker.return.signals[i-1] <- "hold"
		}
		
		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
		    ticker.return.signals[i] <- "hold"
		
	}
	print(" ticker.return.signals ")
	print(nrow(ticker.return.signals))
	
	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
	n <- nrow(ticker.return)
	ticker.return.adjusted <- as.numeric(n)
	for(i in 1:nrow(ticker.return)-1)
		{
			ticker.return.adjusted[i] <- ticker.return[i+1]
		}
		ticker.return.adjusted[n] <- ticker.return[n]
	
	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
	print(" ticker.return.factors ")
	print(nrow(ticker.return.factors))
	
	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
	return(result)
}
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> getPeriodReturnSignals <- function(ticker,timeFrequency,percent) 
+ {	
+ 	#percent.absolute <- (percent/100)
+ 	percent.absolute <- percent
+ 	print(percent.absolute)
+ 	print(" calculating daily returns ")
+ 	
+ 	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
+ 	
+ 	for(k in 1:nrow(ticker.return))
+ 	{
+ 		ticker.return[k] <- ticker.return[k] * 100
+ 	}
+ 	print(" calculated percent daily returns ")
+ 	#rounding the returns
+ 	#ticker.return <- round(ticker.return)
+ 	
+ 	
+ 	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
+ 	ticker.return.signals <- (nrow(ticker.return))
+ 	
+ 	print(" ticker.return.signals")
+ 	
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	print(" calculating daily return signals ")
+ 	
+ 	
+ 	print(" ticker ")
+ 	print(nrow(ticker))
+ 	n<-nrow(ticker)
+ 	
+ 	
+ 	for(i in 2:n)
+ 	{
+ 	
+ 		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
+ 		
+ 		if(ticker.return[i] > percent.absolute)
+ 		{
+ 			#print("buy")
+ 			ticker.return.signals[i-1] <- "buy"
+ 			
+ 		}
+ 		else if(ticker.return[i] < -percent.absolute)
+ 		{	
+ 			#print("sell")
+ 			ticker.return.signals[i-1] <- "sell"
+ 		}
+ 		else
+ 		{
+ 			#print("hold")
+ 			ticker.return.signals[i-1] <- "hold"
+ 		}
+ 		
+ 		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
+ 		    ticker.return.signals[i] <- "hold"
+ 		
+ 	}
+ 	print(" ticker.return.signals ")
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
+ 	n <- nrow(ticker.return)
+ 	ticker.return.adjusted <- as.numeric(n)
+ 	for(i in 1:nrow(ticker.return)-1)
+ 		{
+ 			ticker.return.adjusted[i] <- ticker.return[i+1]
+ 		}
+ 		ticker.return.adjusted[n] <- ticker.return[n]
+ 	
+ 	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
+ 	print(" ticker.return.factors ")
+ 	print(nrow(ticker.return.factors))
+ 	
+ 	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
+ 	return(result)
+ }
> as.environment(".GlobalEnv")$getPeriodReturnSignals
function(ticker,timeFrequency,percent) 
{	
	#percent.absolute <- (percent/100)
	percent.absolute <- percent
	print(percent.absolute)
	print(" calculating daily returns ")
	
	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
	
	for(k in 1:nrow(ticker.return))
	{
		ticker.return[k] <- ticker.return[k] * 100
	}
	print(" calculated percent daily returns ")
	#rounding the returns
	#ticker.return <- round(ticker.return)
	
	
	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
	ticker.return.signals <- (nrow(ticker.return))
	
	print(" ticker.return.signals")
	
	print(nrow(ticker.return.signals))
	
	print(" calculating daily return signals ")
	
	
	print(" ticker ")
	print(nrow(ticker))
	n<-nrow(ticker)
	
	
	for(i in 2:n)
	{
	
		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
		
		if(ticker.return[i] > percent.absolute)
		{
			#print("buy")
			ticker.return.signals[i-1] <- "buy"
			
		}
		else if(ticker.return[i] < -percent.absolute)
		{	
			#print("sell")
			ticker.return.signals[i-1] <- "sell"
		}
		else
		{
			#print("hold")
			ticker.return.signals[i-1] <- "hold"
		}
		
		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
		    ticker.return.signals[i] <- "hold"
		
	}
	print(" ticker.return.signals ")
	print(nrow(ticker.return.signals))
	
	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
	n <- nrow(ticker.return)
	ticker.return.adjusted <- as.numeric(n)
	for(i in 1:nrow(ticker.return)-1)
		{
			ticker.return.adjusted[i] <- ticker.return[i+1]
		}
		ticker.return.adjusted[n] <- ticker.return[n]
	
	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
	print(" ticker.return.factors ")
	print(nrow(ticker.return.factors))
	
	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
	return(result)
}
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 480
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 0
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
Error in predict.randomForest(ticker.rfmodel, tickerTestData) : 
  Type of predictors in new data do not match that of the training data.
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
Error in table(ticker.prediction, tickerTestData$ticker.return.signals) : 
  all arguments must have the same length
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error in ts(x) : 'ts' object must have one or more observations
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  arguments imply differing number of rows: 0, 381, 1
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> as.environment(".GlobalEnv")$getPeriodReturnSignals
function(ticker,timeFrequency,percent) 
{	
	#percent.absolute <- (percent/100)
	percent.absolute <- percent
	print(percent.absolute)
	print(" calculating daily returns ")
	
	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
	
	for(k in 1:nrow(ticker.return))
	{
		ticker.return[k] <- ticker.return[k] * 100
	}
	print(" calculated percent daily returns ")
	#rounding the returns
	#ticker.return <- round(ticker.return)
	
	
	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
	ticker.return.signals <- (nrow(ticker.return))
	
	print(" ticker.return.signals")
	
	print(nrow(ticker.return.signals))
	
	print(" calculating daily return signals ")
	
	
	print(" ticker ")
	print(nrow(ticker))
	n<-nrow(ticker)
	
	
	for(i in 2:n)
	{
	
		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
		
		if(ticker.return[i] > percent.absolute)
		{
			#print("buy")
			ticker.return.signals[i-1] <- "buy"
			
		}
		else if(ticker.return[i] < -percent.absolute)
		{	
			#print("sell")
			ticker.return.signals[i-1] <- "sell"
		}
		else
		{
			#print("hold")
			ticker.return.signals[i-1] <- "hold"
		}
		
		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
		    ticker.return.signals[i] <- "hold"
		
	}
	print(" ticker.return.signals ")
	print(nrow(ticker.return.signals))
	
	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
	n <- nrow(ticker.return)
	ticker.return.adjusted <- as.numeric(n)
	for(i in 1:nrow(ticker.return)-1)
		{
			ticker.return.adjusted[i] <- ticker.return[i+1]
		}
		ticker.return.adjusted[n] <- ticker.return[n]
	
	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
	print(" ticker.return.factors ")
	print(nrow(ticker.return.factors))
	
	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
	return(result)
}
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> getPeriodReturnSignals <- function(ticker,timeFrequency,percent) 
+ {	
+ 	#percent.absolute <- (percent/100)
+ 	percent.absolute <- percent
+ 	print(percent.absolute)
+ 	print(" calculating daily returns ")
+ 	
+ 	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
+ 	
+ 	for(k in 1:nrow(ticker.return))
+ 	{
+ 		ticker.return[k] <- ticker.return[k] * 100
+ 	}
+ 	print(" calculated percent daily returns ")
+ 	#rounding the returns
+ 	#ticker.return <- round(ticker.return)
+ 	
+ 	
+ 	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
+ 	ticker.return.signals <- (nrow(ticker.return))
+ 	
+ 	print(" ticker.return.signals")
+ 	
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	print(" calculating daily return signals ")
+ 	
+ 	
+ 	print(" ticker ")
+ 	print(nrow(ticker))
+ 	n<-nrow(ticker)
+ 	
+ 	
+ 	for(i in 2:n)
+ 	{
+ 	
+ 		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
+ 		
+ 		if(ticker.return[i] > percent.absolute)
+ 		{
+ 			#print("buy")
+ 			ticker.return.signals[i-1] <- "buy"
+ 			
+ 		}
+ 		else if(ticker.return[i] < -percent.absolute)
+ 		{	
+ 			#print("sell")
+ 			ticker.return.signals[i-1] <- "sell"
+ 		}
+ 		else
+ 		{
+ 			#print("hold")
+ 			ticker.return.signals[i-1] <- "hold"
+ 		}
+ 		
+ 		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
+ 		    ticker.return.signals[i] <- "hold"
+ 		
+ 	}
+ 	print(" ticker.return.signals ")
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
+ 	n <- nrow(ticker.return)
+ 	ticker.return.adjusted <- as.numeric(n)
+ 	for(i in 1:nrow(ticker.return)-1)
+ 		{
+ 			ticker.return.adjusted[i] <- ticker.return[i+1]
+ 		}
+ 		ticker.return.adjusted[n] <- ticker.return[n]
+ 	
+ 	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
+ 	print(" ticker.return.factors ")
+ 	print(nrow(ticker.return.factors))
+ 	
+ 	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
+ 	return(result)
+ }
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 480
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 0
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
Error in predict.randomForest(ticker.rfmodel, tickerTestData) : 
  Type of predictors in new data do not match that of the training data.
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
Error in table(ticker.prediction, tickerTestData$ticker.return.signals) : 
  all arguments must have the same length
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
Error in ts(x) : 'ts' object must have one or more observations
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in data.frame(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  arguments imply differing number of rows: 0, 381, 1
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> getPeriodReturnSignals <- function(ticker,timeFrequency,percent) 
+ {	
+ 	#percent.absolute <- (percent/100)
+ 	percent.absolute <- percent
+ 	print(percent.absolute)
+ 	print(" calculating daily returns ")
+ 	
+ 	ticker.return <- dailyReturn(ticker[,"Close"], subset=NULL, type='arithmetic', leading=TRUE)
+ 	
+ 	for(k in 1:nrow(ticker.return))
+ 	{
+ 		ticker.return[k] <- ticker.return[k] * 100
+ 	}
+ 	print(" calculated percent daily returns ")
+ 	#rounding the returns
+ 	ticker.return <- round(ticker.return)
+ 	
+ 	
+ 	# ticker.return.percent <- Delt(ticker.return,type="arithmetic")
+ 	ticker.return.signals <- (nrow(ticker.return))
+ 	
+ 	print(" ticker.return.signals")
+ 	
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	print(" calculating daily return signals ")
+ 	
+ 	
+ 	print(" ticker ")
+ 	print(nrow(ticker))
+ 	n<-nrow(ticker)
+ 	
+ 	
+ 	for(i in 2:n)
+ 	{
+ 	
+ 		#ticker.return.signals[i] <- ifelse(percent.absolute < ticker.return[i],"Buy","Sell")
+ 		
+ 		if(ticker.return[i] > percent.absolute)
+ 		{
+ 			#print("buy")
+ 			ticker.return.signals[i-1] <- "buy"
+ 			
+ 		}
+ 		else if(ticker.return[i] < -percent.absolute)
+ 		{	
+ 			#print("sell")
+ 			ticker.return.signals[i-1] <- "sell"
+ 		}
+ 		else
+ 		{
+ 			#print("hold")
+ 			ticker.return.signals[i-1] <- "hold"
+ 		}
+ 		
+ 		##TODO : ADDED ONLY TO MAKE ROWS EQUAL  
+ 		    ticker.return.signals[i] <- "hold"
+ 		
+ 	}
+ 	print(" ticker.return.signals ")
+ 	print(nrow(ticker.return.signals))
+ 	
+ 	## ADJUSTING COLUMN OF PREDICTED % RETURNS COLUMN BY MOVING ALL ENTRIES BY 1 DAY
+ 	n <- nrow(ticker.return)
+ 	ticker.return.adjusted <- as.numeric(n)
+ 	for(i in 1:nrow(ticker.return)-1)
+ 		{
+ 			ticker.return.adjusted[i] <- ticker.return[i+1]
+ 		}
+ 		ticker.return.adjusted[n] <- ticker.return[n]
+ 	
+ 	ticker.return.factors <- factor(ticker.return.adjusted,levels=c(-9:10))
+ 	print(" ticker.return.factors ")
+ 	print(nrow(ticker.return.factors))
+ 	
+ 	result <-data.frame(ticker.return.signals,ticker.return,ticker.return.factors,ticker$Open,ticker$Close,ticker$High,ticker$Low,ticker$Volume)
+ 	return(result)
+ }
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.prediction.values[i]
+ 				percentincrease = (percent /100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- as.data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in as.data.frame.factor(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  row names must be 'character' or 'integer', not 'double'
In addition: Warning message:
In if (!optional) names(value) <- nm :
  the condition has length > 1 and only the first element will be used
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
In if (!optional) names(value) <- nm :
  the condition has length > 1 and only the first element will be used
> 
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- c(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- cbind(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> print("dropping unused levels")
[1] "dropping unused levels"
> 
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> print("print csv")
[1] "print csv"
> 
> csvData <- as.data.frame()
Error in as.data.frame() : argument "x" is missing, with no default
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals, ticker.prediction, 
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,tickerTestData$dn,tickerTestData$up,
+ 		tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> fileExtension<- "csv"
> print("paste csv")
[1] "paste csv"
> 
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> print("printed csv")
[1] "printed csv"
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 480
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> print("dropping unused levels")
[1] "dropping unused levels"
> 
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 381
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> print("print csv")
[1] "print csv"
> 
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals, ticker.prediction, 
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,tickerTestData$dn,tickerTestData$up,
+ 		tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> fileExtension<- "csv"
> print("paste csv")
[1] "paste csv"
> 
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> print("printed csv")
[1] "printed csv"
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20130101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 236
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 137
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
Error in predict.randomForest(ticker.rfmodel, tickerTestData) : 
  Type of predictors in new data do not match that of the training data.
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
Warning message:
In cbind(tickerTestData$daily.returns, as.character(tickerTestData$ticker.return.signals),  :
  number of rows of result is not a multiple of vector length (arg 1)
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
Error in table(ticker.prediction, tickerTestData$ticker.return.signals) : 
  all arguments must have the same length
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> getBolingerBandsSignals <- function(ticker) 
+ {
+ 	ticker.bbands <- BBands( ticker[,"Close"] )
+ 	ticker.moneyflowindex <- MFI(ticker[,c("High","Low","Close")], ticker[,"Volume"])
+ 	
+ 	ticker.bbands.signals <- nrow(ticker)
+ 	n<-nrow(ticker)
+ 	
+ 	for(i in 50:n)
+ 	{
+ 		
+ 		if(ticker.bbands[i,"pctB"] > 0.70 && ticker.moneyflowindex[i,"mfi"] > 70 && ticker.moneyflowindex[i-1,"mfi"] < 70 )
+ 		{	
+ 			#print("buy")
+ 			ticker.bbands.signals[i] <- "buy"
+ 		}
+ 		else if(ticker.bbands[i,"pctB"] < 0.30 && ticker.moneyflowindex[i,"mfi"] < 30 && ticker.moneyflowindex[i-1,"mfi"] > 30 )
+ 		{	
+ 			#print("sell")
+ 			ticker.bbands.signals[i] <- "sell"
+ 		}
+ 		else
+ 		{
+ 			#print("hold")
+ 			ticker.bbands.signals[i] <- "hold"
+ 		}
+ 		
+ 	}
+ 	
+ 	result <- data.frame(ticker.bbands.signals,ticker.bbands,ticker.moneyflowindex)
+ 	return(result)
+ }
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> 
> getRsiSignals <- function(ticker) 
+ {
+ 	rsi <- RSI(ticker[,"Close"])
+ 	ticker.rsi.signals <- nrow(ticker)
+ 	
+ 	for(i in 100:nrow(ticker))
+ 	{
+ 		if(rsi[i,"Close.EMA.14"] < 30)
+ 			ticker.rsi.signals[i] <- "buy"
+ 		
+ 		else if(rsi[i,"Close.EMA.14"] > 60)
+ 			ticker.rsi.signals[i] <- "sell"
+ 		
+ 		else
+ 			ticker.rsi.signals[i] <- "hold"	  
+ 	}
+ 	
+ 	result <- data.frame(rsi,ticker.rsi.signals)
+ 	return(result)
+ }
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20130101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 236
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 137
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> getBolingerBandsSignals <- function(ticker) 
+ {
+ 	ticker.bbands <- BBands( ticker[,"Close"] )
+ 	ticker.moneyflowindex <- MFI(ticker[,c("High","Low","Close")], ticker[,"Volume"])
+ 	
+ 	ticker.bbands.signals <- nrow(ticker)
+ 	n<-nrow(ticker)
+ 	
+ 	for(i in 50:n)
+ 	{
+ 		
+ 		if(ticker.bbands[i,"pctB"] > 0.80 && ticker.moneyflowindex[i,"mfi"] > 80 && ticker.moneyflowindex[i-1,"mfi"] < 80 )
+ 		{	
+ 			#print("buy")
+ 			ticker.bbands.signals[i] <- "buy"
+ 		}
+ 		else if(ticker.bbands[i,"pctB"] < 0.20 && ticker.moneyflowindex[i,"mfi"] < 20 && ticker.moneyflowindex[i-1,"mfi"] > 20 )
+ 		{	
+ 			#print("sell")
+ 			ticker.bbands.signals[i] <- "sell"
+ 		}
+ 		else
+ 		{
+ 			#print("hold")
+ 			ticker.bbands.signals[i] <- "hold"
+ 		}
+ 		
+ 	}
+ 	
+ 	result <- data.frame(ticker.bbands.signals,ticker.bbands,ticker.moneyflowindex)
+ 	return(result)
+ }
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> 
> getRsiSignals <- function(ticker) 
+ {
+ 	rsi <- RSI(ticker[,"Close"])
+ 	ticker.rsi.signals <- nrow(ticker)
+ 	
+ 	for(i in 100:nrow(ticker))
+ 	{
+ 		if(rsi[i,"Close.EMA.14"] < 30)
+ 			ticker.rsi.signals[i] <- "buy"
+ 		
+ 		else if(rsi[i,"Close.EMA.14"] > 70)
+ 			ticker.rsi.signals[i] <- "sell"
+ 		
+ 		else
+ 			ticker.rsi.signals[i] <- "hold"	  
+ 	}
+ 	
+ 	result <- data.frame(rsi,ticker.rsi.signals)
+ 	return(result)
+ }
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- as.data.frame(arimaPricePrediction(tickerTestData,ticker.prediction.signals))
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
Error in `[.data.frame`(ticker.arima, i) : undefined columns selected
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
Error: could not find function "confusionMatrix"
> 
> csvData <- as.data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
Error in as.data.frame.factor(tickerTestData$ticker.return.signals, tickerTestData$daily.returns,  : 
  row names must be 'character' or 'integer', not 'double'
In addition: Warning message:
In if (!optional) names(value) <- nm :
  the condition has length > 1 and only the first element will be used
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
In if (!optional) names(value) <- nm :
  the condition has length > 1 and only the first element will be used
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
Error: could not find function "confusionMatrix"
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
Warning message:
In rm(csvData, pos = as.environment(".GlobalEnv")) :
  object 'csvData' not found
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
Warning message:
NAs introduced by coercion 
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
Error: could not find function "confusionMatrix"
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
Error: could not find function "confusionMatrix"
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> #confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
Error: could not find function "confusionMatrix"
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> rownames(csvData) = 1:nrow(csvData)
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
NAs introduced by coercion
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1009
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 0.88%
Confusion matrix:
     buy hold sell class.error
buy   50    4    2  0.10714286
hold   0  795    0  0.00000000
sell   1    1   56  0.03448276
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -6.24  -3.15  -3.87                -5.91
Close.SMA.20              3.41  46.22  -4.15                45.89
Close.SMA.50             -0.60  45.84  -8.41                44.31
daily.returns            -0.50  21.94 -16.28                 9.51
ticker.return.factors   204.17 290.38 209.03               284.37
Open                      8.14  43.92  -1.17                44.40
Close                    12.94  45.13  -0.38                46.30
High                      5.66  47.35   2.52                47.99
Low                       5.05  50.37   0.58                50.97
Volume                   -1.03  46.49  -3.61                39.77
ticker.sma.signals        6.78   6.48  -3.47                 7.08
ticker.bbands.signals     2.81   4.42  -2.00                 4.49
dn                        1.82  39.70   2.01                39.98
mavg                      0.87  44.52  -3.86                43.90
up                       -5.70  39.93   5.10                39.78
pctB                      7.19  28.03  -3.00                26.85
mfi                      -5.26  32.05 -10.19                21.83
Close.EMA.14              5.12  41.86   3.61                41.08
ticker.rsi.signals       -4.36   8.89  -1.87                 6.76
                        MeanDecreaseGini
ticker.multisma.signals             0.50
Close.SMA.20                        5.20
Close.SMA.50                        5.53
daily.returns                       3.13
ticker.return.factors             116.06
Open                                6.94
Close                               8.56
High                                8.05
Low                                 8.15
Volume                              7.25
ticker.sma.signals                  0.20
ticker.bbands.signals               0.13
dn                                  5.90
mavg                                5.18
up                                  5.21
pctB                                5.73
mfi                                 6.28
Close.EMA.14                        7.92
ticker.rsi.signals                  0.20
Time difference of 40.65831 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 387
[1] "renaming column names"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 72.21502 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> 
> 
> library(randomForest)
> library(quantmod)
> library(TTR)
> library(tseries)
> 
> closeAllConnections()
> 
> memory.limit(size=2566)
[1] Inf
Warning message:
'memory.limit()' is Windows-specific 
> 
> rm(list = ls())
> 
> 
> now1 <- Sys.time()
> 
> tickerSymbol <- "IBM"
> 
> print("Building the Model")
[1] "Building the Model"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/RemoveAll.R")
> 
> print("Building Technical Indicators")
[1] "Building Technical Indicators"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerBBandsSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerMultiSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerRsiSignals.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerSmaSignals.R")
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/utils/IDOperator.R")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/persistence/CsvPersistence.R")
> 
> print("Loading the Training Data from API's")
[1] "Loading the Training Data from API's"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/etl/Load.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1009
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
Warning message:
'memory.limit()' is Windows-specific 
> 
> print("Training Random Forest Model from training dataset")
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/randomforest/RandomForestModelSignals.R")
[1] "removing rows containing NA"
[1] "dropping unused levels"

Call:
 randomForest(formula = ticker.return.signals ~ ., data = tickerTrainData,      ntree = 10000, importance = TRUE, na.action = na.omit) 
               Type of random forest: classification
                     Number of trees: 10000
No. of variables tried at each split: 4

        OOB estimate of  error rate: 0.88%
Confusion matrix:
     buy hold sell class.error
buy   50    4    2  0.10714286
hold   0  795    0  0.00000000
sell   1    1   56  0.03448276
                           buy   hold   sell MeanDecreaseAccuracy
ticker.multisma.signals  -6.44  -0.58  -1.99                -2.98
Close.SMA.20              4.15  46.48  -3.06                46.30
Close.SMA.50             -0.68  45.85  -6.20                44.60
daily.returns            -1.99  19.19 -17.64                 6.15
ticker.return.factors   203.06 289.93 209.32               285.25
Open                      9.25  43.90  -0.82                44.49
Close                    11.63  46.34  -0.63                47.30
High                      6.79  47.53   5.16                48.55
Low                       6.21  50.26   2.43                50.76
Volume                   -2.74  47.13  -2.56                39.86
ticker.sma.signals        7.28   7.40  -3.02                 8.02
ticker.bbands.signals     2.20   5.68  -3.28                 4.87
dn                        5.46  40.08   3.23                40.78
mavg                      2.54  46.20  -2.49                45.98
up                       -4.72  40.82   5.58                40.87
pctB                      7.91  27.24  -5.26                25.95
mfi                      -7.78  33.02  -9.67                21.57
Close.EMA.14              4.14  42.55   4.43                42.28
ticker.rsi.signals       -6.19   8.31  -2.07                 5.47
                        MeanDecreaseGini
ticker.multisma.signals             0.51
Close.SMA.20                        5.18
Close.SMA.50                        5.54
daily.returns                       3.07
ticker.return.factors             116.18
Open                                7.01
Close                               8.54
High                                7.88
Low                                 8.28
Volume                              7.30
ticker.sma.signals                  0.20
ticker.bbands.signals               0.13
dn                                  6.08
mavg                                5.21
up                                  5.30
pctB                                5.74
mfi                                 6.31
Close.EMA.14                        7.78
ticker.rsi.signals                  0.21
Time difference of 50.25677 secs
> 
> print("Training Arima Model from Training dataset")
[1] "Training Arima Model from Training dataset"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/models/arima/ArimaModelPrices.R")
> 
> print("Predicting the Stocks for Test Period")
[1] "Predicting the Stocks for Test Period"
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/run/testmodels/PredictTickerPrices.R")
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
[1] "removing rows containing NA from test data"
[1] 387
[1] "renaming column names"
> 
> print("Completed prediction for Stock for Test Period to" )
[1] "Completed prediction for Stock for Test Period to"
> now2 <- Sys.time()
> 
> print(difftime(now2,now1,unit="sec"))
Time difference of 82.03039 secs
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> #names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> #names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> 
> 
> #names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> #names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> #names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> #names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> #names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> #names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> #names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> #names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> #names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> #names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> #names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> #names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> #names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- data.frame(nrow(tickerTestData))
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> 
> 
> 
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> #######################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> smaSignal <- getSmaSignals(tickerOHLC,20)
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> print("dropping unused levels")
[1] "dropping unused levels"
> 
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> 
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> print("print csv")
[1] "print csv"
> 
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals, ticker.prediction, 
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low,tickerTestData$Close, 
+ 		tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,tickerTestData$dn,tickerTestData$up,
+ 		tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> fileExtension<- "csv"
> print("paste csv")
[1] "paste csv"
> 
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> print("printed csv")
[1] "printed csv"
> 
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.prediction,ticker.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.arima,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.arima,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- vector(ticker.arima)
Error in vector(ticker.arima) : invalid 'mode' argument
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.arima,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- as.numeric(ticker.arima)
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.close.prediction,ticker.arima,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- cbind(ticker.arima1,tickerTestData$ticker.return.signals)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- data.frame(ticker.arima1,tickerTestData$ticker.return.signals)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- as.data.frame(ticker.arima1,tickerTestData$ticker.return.signals)
Error in as.data.frame.numeric(ticker.arima1, tickerTestData$ticker.return.signals) : 
  row names must be 'character' or 'integer', not 'integer'
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- c(ticker.arima1,tickerTestData$ticker.return.signals)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- r(ticker.arima1,tickerTestData$ticker.return.signals)
Error: could not find function "r"
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- data.frame(ticker.arima1,tickerTestData$ticker.return.signals)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> d <- data.frame(ticker.arima1,tickerTestData)
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- (ticker.arima)
> d <- data.frame(ticker.arima1,tickerTestData)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,d$ticker.arima1,ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- (ticker.arima)
> d <- data.frame(ticker.arima1,tickerTestData)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,d[,1],ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- (ticker.arima)
> d <- data.frame(ticker.arima1,ticker.close.prediction,tickerTestData)
> 
> csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,d[,1],ticker.close.prediction,tickerTestData$Close,
+ 		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
+ 		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
+ 		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> #names(csvData)[names(csvData)=="ticker.arima"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- (ticker.arima)
> csvData <- data.frame(ticker.arima1,ticker.close.prediction,tickerTestData)
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,d[,1],ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="tickerTestData.daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima1"] <- "predicted returns %"
> names(csvData)[names(csvData)=="tickerTestData.ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="tickerTestData.Open"] <- "open"
> names(csvData)[names(csvData)=="tickerTestData.High"] <- "high"
> names(csvData)[names(csvData)=="tickerTestData.Low"] <- "low"
> names(csvData)[names(csvData)=="tickerTestData.Close"] <- "close"
> names(csvData)[names(csvData)=="tickerTestData.Volume"] <- "volume"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="tickerTestData.Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="tickerTestData.dn"] <- "lower bband "
> names(csvData)[names(csvData)=="tickerTestData.up"] <- "higher bband"
> names(csvData)[names(csvData)=="tickerTestData.mavg"] <- "mavg"
> names(csvData)[names(csvData)=="tickerTestData.pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="tickerTestData.mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkya
> ###############################################################################
> 
> #library(caret) 
> library(plyr)
> 
> predictStartDate<-20120101
> predictEndDate<-20131207
> 
> tickerOHLC <- getYahooData(tickerSymbol, predictStartDate, predictEndDate ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> #print(aapl)
> 
> ################################################################################
> 
> tickerDailySignal <- getPeriodReturnSignals(tickerOHLC,"daily",2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 486
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> smaMultiSmaSignal <- getMultiSmaSignals(tickerOHLC)
> 
> smaSignal <- getSmaSignals(tickerOHLC,20)
> 
> bbandSignal <- getBolingerBandsSignals(tickerOHLC)
> rsiSignal <- getRsiSignals(tickerOHLC)
> 
> tickerTestData <- cbind(smaMultiSmaSignal,tickerDailySignal,smaSignal,bbandSignal,rsiSignal)
> 
> row.has.na <- apply(tickerTestData, 1, function(x){any(is.na(x))})
> sum(row.has.na)
[1] 99
> tickerTestData <- tickerTestData[!row.has.na,]
> print("removing rows containing NA from test data")
[1] "removing rows containing NA from test data"
> 
> tickerTestData$ticker.multisma.signals <- droplevels(tickerTestData$ticker.multisma.signals)
> tickerTestData$ticker.return.signals <- droplevels(tickerTestData$ticker.return.signals)
> tickerTestData$ticker.sma.signals <- droplevels(tickerTestData$ticker.sma.signals)
> tickerTestData$ticker.bbands.signals <- droplevels(tickerTestData$ticker.bbands.signals)
> tickerTestData$ticker.rsi.signals <- droplevels(tickerTestData$ticker.rsi.signals)
> 
> i<-nrow(tickerTestData)
> print(i)
[1] 387
> 
> ticker.prediction <- predict(ticker.rfmodel, tickerTestData)
> check1 <- cbind(tickerTestData$daily.returns,as.character(tickerTestData$ticker.return.signals),as.character(ticker.prediction))
> ticker.prediction.signals <- as.character(ticker.prediction)
> 		
> confusionmatrix <- table(ticker.prediction, tickerTestData$ticker.return.signals)
> 
> ticker.arima <- arimaPricePrediction(tickerTestData,ticker.prediction.signals)
> #ticker.arima <- ceiling(ticker.arima)
> 		
> ## For loop to calculate the predicted prices
> ticker.close.prediction <- nrow(tickerTestData)
> #ticker.prediction.values <- as.numeric(as.character(ticker.prediction))		
> 
> for(i in 1:nrow(tickerTestData))
+ 			{
+ 				percent <- ticker.arima[i]
+ 				percentincrease = (percent/100)*tickerTestData$Close[i]
+ 				ticker.close.prediction[i] =  (tickerTestData$Close[i] + percentincrease)
+ 			}
> 
> #confusionmatrix <- confusionMatrix(ticker.prediction, tickerTestData$daily.returns)
> 
> 
> 
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,ticker.arima,ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> ticker.arima1 <- (ticker.arima)
> csvData <- data.frame(ticker.arima1,ticker.close.prediction,tickerTestData)
> 
> #csvData <- data.frame(tickerTestData$ticker.return.signals,tickerTestData$daily.returns,d[,1],ticker.close.prediction,tickerTestData$Close,
> #		tickerTestData$Open,tickerTestData$High,tickerTestData$Low, 
> #		tickerTestData$Volume,tickerTestData$Close.SMA.20,tickerTestData$Close.SMA.50,
> #		tickerTestData$dn,tickerTestData$up,tickerTestData$mavg,tickerTestData$pctB,tickerTestData$mfi)
> 
> 
> print("renaming column names")
[1] "renaming column names"
> 
> names(csvData)[names(csvData)=="ticker.close.prediction"] <- "predicted price"
> names(csvData)[names(csvData)=="daily.returns"] <- "actual returns %"
> 
> #this is not required
> #names(csvData)[names(csvData)=="ticker.prediction"] <- "predicted returns %"
> 
> names(csvData)[names(csvData)=="ticker.arima1"] <- "predicted returns %"
> names(csvData)[names(csvData)=="ticker.return.signals"] <- "recommendation signals"
> names(csvData)[names(csvData)=="Open"] <- "open"
> names(csvData)[names(csvData)=="High"] <- "high"
> names(csvData)[names(csvData)=="Low"] <- "low"
> names(csvData)[names(csvData)=="Close"] <- "close"
> names(csvData)[names(csvData)=="Volume"] <- "volume"
> names(csvData)[names(csvData)=="Close.SMA.20"] <- "20 day sma"
> names(csvData)[names(csvData)=="Close.SMA.50"] <- "50 day sma"
> names(csvData)[names(csvData)=="dn"] <- "lower bband "
> names(csvData)[names(csvData)=="up"] <- "higher bband"
> names(csvData)[names(csvData)=="mavg"] <- "mavg"
> names(csvData)[names(csvData)=="pctB"] <- "bband pctb"
> names(csvData)[names(csvData)=="mfi"] <- "money flow index"
> 
> fileExtension<- "csv"
> csvFileName <- paste(tickerSymbol,fileExtension,sep=".")
> writeToCsv(csvData,csvFileName)
> 
> warnings()
Warning message:
'memory.limit()' is Windows-specific
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> 
> #ticker <- getYahooData("IBM", 20120101, 20131111 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #tdi <- TDI(ticker[,"Close"], n=20)  # trend 
> 
> #d <- data.frame(ticker.arima1,tickerTestData)
> 
> rm(list=(ls()[ls()!=ticker.rfmodel]))
