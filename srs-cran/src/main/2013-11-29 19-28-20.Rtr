##------ Nov 29, 2013 7:28:20 PM ------##

R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> cat("welcome to CRAN-R")
welcome to CRAN-R> install.packages('forecast')
--- Please select a CRAN mirror for use in this session ---
also installing the dependencies 'fracdiff', 'Rcpp', 'RcppArmadillo', 'colorspace'

trying URL 'http://ftp.iitm.ac.in/cran/bin/macosx/contrib/3.0/fracdiff_1.4-2.tgz'
Content type 'application/x-gzip' length 82903 bytes (80 Kb)
opened URL
==================================================
downloaded 80 Kb

trying URL 'http://ftp.iitm.ac.in/cran/bin/macosx/contrib/3.0/Rcpp_0.10.6.tgz'
Content type 'application/x-gzip' length 3725335 bytes (3.6 Mb)
opened URL
==================================================
downloaded 3.6 Mb

trying URL 'http://ftp.iitm.ac.in/cran/bin/macosx/contrib/3.0/RcppArmadillo_0.3.920.3.tgz'
Content type 'application/x-gzip' length 1178450 bytes (1.1 Mb)
opened URL
==================================================
downloaded 1.1 Mb

trying URL 'http://ftp.iitm.ac.in/cran/bin/macosx/contrib/3.0/colorspace_1.2-4.tgz'
Content type 'application/x-gzip' length 367907 bytes (359 Kb)
opened URL
==================================================
downloaded 359 Kb

trying URL 'http://ftp.iitm.ac.in/cran/bin/macosx/contrib/3.0/forecast_4.8.tgz'
Content type 'application/x-gzip' length 1179737 bytes (1.1 Mb)
opened URL
==================================================
downloaded 1.1 Mb


The downloaded binary packages are in
	/var/folders/ft/m40j_q3s4z35ksylss2_6w_w0000gn/T//Rtmpd3L8IA/downloaded_packages
> 
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
> library(TTR)
Loading required package: xts
Loading required package: zoo

Attaching package: 'zoo'

The following object is masked from 'package:base':

    as.Date, as.Date.numeric

> library(forecast)
This is forecast 4.8 

> 
> gas<-gas()
Error: could not find function "gas"
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> 
> fit <- auto.arima(gas)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> 
> fit <- auto.arima(d$Close)
Warning messages:
1: In if (is.constant(x)) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.constant(x)) return(d) :
  the condition has length > 1 and only the first element will be used
3: In if (is.constant(dx)) { :
  the condition has length > 1 and only the first element will be used
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> 
> fit <- auto.arima(as.ts(d$Close))
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(gas)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(gas)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(gas)
> plot(forecast(fit,h=20))
> 
> 
> 
> 
> 
> 
> 
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> #x <- as.ts(d$Close)
> fit <- auto.arima(gas)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arfima(x)
Error: could not find function "auto.arfima"
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> plot(forecast(fit,h=20))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> plot(forecast(fit,h=2))
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=2)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> #getPeriodReturnSignals(ticker, timeFrequency, percent)
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=200)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
Error in getPeriodReturnSignals(d, "daily", 2) : 
  could not find function "dailyReturn"
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=200)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
Loading required package: Defaults
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 3169
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(d$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=200)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 3169
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=200)
> plot(f)
> as.environment(".GlobalEnv")$f
     Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95
3170  -9.373324e-03 -2.116153 2.097407 -3.231415 3.212669
3171  -1.625655e-05 -2.106800 2.106767 -3.222063 3.222031
3172  -8.788740e-05 -2.106964 2.106788 -3.222276 3.222101
3173  -3.048047e-07 -2.106876 2.106876 -3.222189 3.222188
3174  -8.243257e-07 -2.106877 2.106875 -3.222189 3.222188
3175  -4.286696e-09 -2.106876 2.106876 -3.222189 3.222189
3176  -7.734107e-09 -2.106876 2.106876 -3.222189 3.222189
3177  -5.359418e-11 -2.106876 2.106876 -3.222189 3.222189
3178  -7.258724e-11 -2.106876 2.106876 -3.222189 3.222189
3179  -6.282467e-13 -2.106876 2.106876 -3.222189 3.222189
3180  -6.814733e-13 -2.106876 2.106876 -3.222189 3.222189
3181  -7.070668e-15 -2.106876 2.106876 -3.222189 3.222189
3182  -6.399933e-15 -2.106876 2.106876 -3.222189 3.222189
3183  -7.737533e-17 -2.106876 2.106876 -3.222189 3.222189
3184  -6.012285e-17 -2.106876 2.106876 -3.222189 3.222189
3185  -8.295377e-19 -2.106876 2.106876 -3.222189 3.222189
3186  -5.649896e-19 -2.106876 2.106876 -3.222189 3.222189
3187  -8.755411e-21 -2.106876 2.106876 -3.222189 3.222189
3188  -5.311016e-21 -2.106876 2.106876 -3.222189 3.222189
3189  -9.127842e-23 -2.106876 2.106876 -3.222189 3.222189
3190  -4.994018e-23 -2.106876 2.106876 -3.222189 3.222189
3191  -9.421956e-25 -2.106876 2.106876 -3.222189 3.222189
3192  -4.697396e-25 -2.106876 2.106876 -3.222189 3.222189
3193  -9.646193e-27 -2.106876 2.106876 -3.222189 3.222189
3194  -4.419751e-27 -2.106876 2.106876 -3.222189 3.222189
3195  -9.808226e-29 -2.106876 2.106876 -3.222189 3.222189
3196  -4.159787e-29 -2.106876 2.106876 -3.222189 3.222189
3197  -9.915017e-31 -2.106876 2.106876 -3.222189 3.222189
3198  -3.916299e-31 -2.106876 2.106876 -3.222189 3.222189
3199  -9.972887e-33 -2.106876 2.106876 -3.222189 3.222189
3200  -3.688170e-33 -2.106876 2.106876 -3.222189 3.222189
3201  -9.987565e-35 -2.106876 2.106876 -3.222189 3.222189
3202  -3.474364e-35 -2.106876 2.106876 -3.222189 3.222189
3203  -9.964242e-37 -2.106876 2.106876 -3.222189 3.222189
3204  -3.273915e-37 -2.106876 2.106876 -3.222189 3.222189
3205  -9.907616e-39 -2.106876 2.106876 -3.222189 3.222189
3206  -3.085930e-39 -2.106876 2.106876 -3.222189 3.222189
3207  -9.821936e-41 -2.106876 2.106876 -3.222189 3.222189
3208  -2.909577e-41 -2.106876 2.106876 -3.222189 3.222189
3209  -9.711039e-43 -2.106876 2.106876 -3.222189 3.222189
3210  -2.744083e-43 -2.106876 2.106876 -3.222189 3.222189
3211  -9.578389e-45 -2.106876 2.106876 -3.222189 3.222189
3212  -2.588730e-45 -2.106876 2.106876 -3.222189 3.222189
3213  -9.427109e-47 -2.106876 2.106876 -3.222189 3.222189
3214  -2.442850e-47 -2.106876 2.106876 -3.222189 3.222189
3215  -9.260009e-49 -2.106876 2.106876 -3.222189 3.222189
3216  -2.305823e-49 -2.106876 2.106876 -3.222189 3.222189
3217  -9.079615e-51 -2.106876 2.106876 -3.222189 3.222189
3218  -2.177070e-51 -2.106876 2.106876 -3.222189 3.222189
3219  -8.888195e-53 -2.106876 2.106876 -3.222189 3.222189
3220  -2.056053e-53 -2.106876 2.106876 -3.222189 3.222189
3221  -8.687784e-55 -2.106876 2.106876 -3.222189 3.222189
3222  -1.942273e-55 -2.106876 2.106876 -3.222189 3.222189
3223  -8.480198e-57 -2.106876 2.106876 -3.222189 3.222189
3224  -1.835263e-57 -2.106876 2.106876 -3.222189 3.222189
3225  -8.267062e-59 -2.106876 2.106876 -3.222189 3.222189
3226  -1.734589e-59 -2.106876 2.106876 -3.222189 3.222189
3227  -8.049822e-61 -2.106876 2.106876 -3.222189 3.222189
3228  -1.639848e-61 -2.106876 2.106876 -3.222189 3.222189
3229  -7.829765e-63 -2.106876 2.106876 -3.222189 3.222189
3230  -1.550662e-63 -2.106876 2.106876 -3.222189 3.222189
3231  -7.608030e-65 -2.106876 2.106876 -3.222189 3.222189
3232  -1.466681e-65 -2.106876 2.106876 -3.222189 3.222189
3233  -7.385626e-67 -2.106876 2.106876 -3.222189 3.222189
3234  -1.387577e-67 -2.106876 2.106876 -3.222189 3.222189
3235  -7.163440e-69 -2.106876 2.106876 -3.222189 3.222189
3236  -1.313044e-69 -2.106876 2.106876 -3.222189 3.222189
3237  -6.942251e-71 -2.106876 2.106876 -3.222189 3.222189
3238  -1.242799e-71 -2.106876 2.106876 -3.222189 3.222189
3239  -6.722741e-73 -2.106876 2.106876 -3.222189 3.222189
3240  -1.176576e-73 -2.106876 2.106876 -3.222189 3.222189
3241  -6.505501e-75 -2.106876 2.106876 -3.222189 3.222189
3242  -1.114125e-75 -2.106876 2.106876 -3.222189 3.222189
3243  -6.291045e-77 -2.106876 2.106876 -3.222189 3.222189
3244  -1.055217e-77 -2.106876 2.106876 -3.222189 3.222189
3245  -6.079811e-79 -2.106876 2.106876 -3.222189 3.222189
3246  -9.996331e-80 -2.106876 2.106876 -3.222189 3.222189
3247  -5.872174e-81 -2.106876 2.106876 -3.222189 3.222189
3248  -9.471729e-82 -2.106876 2.106876 -3.222189 3.222189
3249  -5.668451e-83 -2.106876 2.106876 -3.222189 3.222189
3250  -8.976469e-84 -2.106876 2.106876 -3.222189 3.222189
3251  -5.468906e-85 -2.106876 2.106876 -3.222189 3.222189
3252  -8.508785e-86 -2.106876 2.106876 -3.222189 3.222189
3253  -5.273754e-87 -2.106876 2.106876 -3.222189 3.222189
3254  -8.067025e-88 -2.106876 2.106876 -3.222189 3.222189
3255  -5.083171e-89 -2.106876 2.106876 -3.222189 3.222189
3256  -7.649643e-90 -2.106876 2.106876 -3.222189 3.222189
3257  -4.897292e-91 -2.106876 2.106876 -3.222189 3.222189
3258  -7.255194e-92 -2.106876 2.106876 -3.222189 3.222189
3259  -4.716220e-93 -2.106876 2.106876 -3.222189 3.222189
3260  -6.882324e-94 -2.106876 2.106876 -3.222189 3.222189
3261  -4.540029e-95 -2.106876 2.106876 -3.222189 3.222189
3262  -6.529765e-96 -2.106876 2.106876 -3.222189 3.222189
3263  -4.368765e-97 -2.106876 2.106876 -3.222189 3.222189
3264  -6.196330e-98 -2.106876 2.106876 -3.222189 3.222189
3265  -4.202450e-99 -2.106876 2.106876 -3.222189 3.222189
3266 -5.880906e-100 -2.106876 2.106876 -3.222189 3.222189
3267 -4.041088e-101 -2.106876 2.106876 -3.222189 3.222189
3268 -5.582450e-102 -2.106876 2.106876 -3.222189 3.222189
3269 -3.884661e-103 -2.106876 2.106876 -3.222189 3.222189
3270 -5.299984e-104 -2.106876 2.106876 -3.222189 3.222189
3271 -3.733139e-105 -2.106876 2.106876 -3.222189 3.222189
3272 -5.032593e-106 -2.106876 2.106876 -3.222189 3.222189
3273 -3.586475e-107 -2.106876 2.106876 -3.222189 3.222189
3274 -4.779414e-108 -2.106876 2.106876 -3.222189 3.222189
3275 -3.444610e-109 -2.106876 2.106876 -3.222189 3.222189
3276 -4.539641e-110 -2.106876 2.106876 -3.222189 3.222189
3277 -3.307478e-111 -2.106876 2.106876 -3.222189 3.222189
3278 -4.312516e-112 -2.106876 2.106876 -3.222189 3.222189
3279 -3.175000e-113 -2.106876 2.106876 -3.222189 3.222189
3280 -4.097326e-114 -2.106876 2.106876 -3.222189 3.222189
3281 -3.047092e-115 -2.106876 2.106876 -3.222189 3.222189
3282 -3.893403e-116 -2.106876 2.106876 -3.222189 3.222189
3283 -2.923663e-117 -2.106876 2.106876 -3.222189 3.222189
3284 -3.700120e-118 -2.106876 2.106876 -3.222189 3.222189
3285 -2.804617e-119 -2.106876 2.106876 -3.222189 3.222189
3286 -3.516884e-120 -2.106876 2.106876 -3.222189 3.222189
3287 -2.689853e-121 -2.106876 2.106876 -3.222189 3.222189
3288 -3.343140e-122 -2.106876 2.106876 -3.222189 3.222189
3289 -2.579268e-123 -2.106876 2.106876 -3.222189 3.222189
3290 -3.178367e-124 -2.106876 2.106876 -3.222189 3.222189
3291 -2.472755e-125 -2.106876 2.106876 -3.222189 3.222189
3292 -3.022073e-126 -2.106876 2.106876 -3.222189 3.222189
3293 -2.370207e-127 -2.106876 2.106876 -3.222189 3.222189
3294 -2.873794e-128 -2.106876 2.106876 -3.222189 3.222189
3295 -2.271513e-129 -2.106876 2.106876 -3.222189 3.222189
3296 -2.733096e-130 -2.106876 2.106876 -3.222189 3.222189
3297 -2.176564e-131 -2.106876 2.106876 -3.222189 3.222189
3298 -2.599569e-132 -2.106876 2.106876 -3.222189 3.222189
3299 -2.085249e-133 -2.106876 2.106876 -3.222189 3.222189
3300 -2.472825e-134 -2.106876 2.106876 -3.222189 3.222189
3301 -1.997459e-135 -2.106876 2.106876 -3.222189 3.222189
3302 -2.352502e-136 -2.106876 2.106876 -3.222189 3.222189
3303 -1.913084e-137 -2.106876 2.106876 -3.222189 3.222189
3304 -2.238256e-138 -2.106876 2.106876 -3.222189 3.222189
3305 -1.832014e-139 -2.106876 2.106876 -3.222189 3.222189
3306 -2.129763e-140 -2.106876 2.106876 -3.222189 3.222189
3307 -1.754144e-141 -2.106876 2.106876 -3.222189 3.222189
3308 -2.026719e-142 -2.106876 2.106876 -3.222189 3.222189
3309 -1.679366e-143 -2.106876 2.106876 -3.222189 3.222189
3310 -1.928835e-144 -2.106876 2.106876 -3.222189 3.222189
3311 -1.607577e-145 -2.106876 2.106876 -3.222189 3.222189
3312 -1.835841e-146 -2.106876 2.106876 -3.222189 3.222189
3313 -1.538674e-147 -2.106876 2.106876 -3.222189 3.222189
3314 -1.747479e-148 -2.106876 2.106876 -3.222189 3.222189
3315 -1.472556e-149 -2.106876 2.106876 -3.222189 3.222189
3316 -1.663508e-150 -2.106876 2.106876 -3.222189 3.222189
3317 -1.409125e-151 -2.106876 2.106876 -3.222189 3.222189
3318 -1.583699e-152 -2.106876 2.106876 -3.222189 3.222189
3319 -1.348286e-153 -2.106876 2.106876 -3.222189 3.222189
3320 -1.507836e-154 -2.106876 2.106876 -3.222189 3.222189
3321 -1.289943e-155 -2.106876 2.106876 -3.222189 3.222189
3322 -1.435716e-156 -2.106876 2.106876 -3.222189 3.222189
3323 -1.234005e-157 -2.106876 2.106876 -3.222189 3.222189
3324 -1.367145e-158 -2.106876 2.106876 -3.222189 3.222189
3325 -1.180384e-159 -2.106876 2.106876 -3.222189 3.222189
3326 -1.301941e-160 -2.106876 2.106876 -3.222189 3.222189
3327 -1.128992e-161 -2.106876 2.106876 -3.222189 3.222189
3328 -1.239932e-162 -2.106876 2.106876 -3.222189 3.222189
3329 -1.079746e-163 -2.106876 2.106876 -3.222189 3.222189
3330 -1.180955e-164 -2.106876 2.106876 -3.222189 3.222189
3331 -1.032563e-165 -2.106876 2.106876 -3.222189 3.222189
3332 -1.124856e-166 -2.106876 2.106876 -3.222189 3.222189
3333 -9.873633e-168 -2.106876 2.106876 -3.222189 3.222189
3334 -1.071488e-168 -2.106876 2.106876 -3.222189 3.222189
3335 -9.440709e-170 -2.106876 2.106876 -3.222189 3.222189
3336 -1.020714e-170 -2.106876 2.106876 -3.222189 3.222189
3337 -9.026109e-172 -2.106876 2.106876 -3.222189 3.222189
3338 -9.724024e-173 -2.106876 2.106876 -3.222189 3.222189
3339 -8.629112e-174 -2.106876 2.106876 -3.222189 3.222189
3340 -9.264301e-175 -2.106876 2.106876 -3.222189 3.222189
3341 -8.249021e-176 -2.106876 2.106876 -3.222189 3.222189
3342 -8.826796e-177 -2.106876 2.106876 -3.222189 3.222189
3343 -7.885162e-178 -2.106876 2.106876 -3.222189 3.222189
3344 -8.410398e-179 -2.106876 2.106876 -3.222189 3.222189
3345 -7.536883e-180 -2.106876 2.106876 -3.222189 3.222189
3346 -8.014054e-181 -2.106876 2.106876 -3.222189 3.222189
3347 -7.203556e-182 -2.106876 2.106876 -3.222189 3.222189
3348 -7.636766e-183 -2.106876 2.106876 -3.222189 3.222189
3349 -6.884574e-184 -2.106876 2.106876 -3.222189 3.222189
3350 -7.277591e-185 -2.106876 2.106876 -3.222189 3.222189
3351 -6.579353e-186 -2.106876 2.106876 -3.222189 3.222189
3352 -6.935630e-187 -2.106876 2.106876 -3.222189 3.222189
3353 -6.287328e-188 -2.106876 2.106876 -3.222189 3.222189
3354 -6.610035e-189 -2.106876 2.106876 -3.222189 3.222189
3355 -6.007957e-190 -2.106876 2.106876 -3.222189 3.222189
3356 -6.299998e-191 -2.106876 2.106876 -3.222189 3.222189
3357 -5.740716e-192 -2.106876 2.106876 -3.222189 3.222189
3358 -6.004756e-193 -2.106876 2.106876 -3.222189 3.222189
3359 -5.485103e-194 -2.106876 2.106876 -3.222189 3.222189
3360 -5.723583e-195 -2.106876 2.106876 -3.222189 3.222189
3361 -5.240631e-196 -2.106876 2.106876 -3.222189 3.222189
3362 -5.455791e-197 -2.106876 2.106876 -3.222189 3.222189
3363 -5.006835e-198 -2.106876 2.106876 -3.222189 3.222189
3364 -5.200725e-199 -2.106876 2.106876 -3.222189 3.222189
3365 -4.783267e-200 -2.106876 2.106876 -3.222189 3.222189
3366 -4.957766e-201 -2.106876 2.106876 -3.222189 3.222189
3367 -4.569496e-202 -2.106876 2.106876 -3.222189 3.222189
3368 -4.726326e-203 -2.106876 2.106876 -3.222189 3.222189
3369 -4.365108e-204 -2.106876 2.106876 -3.222189 3.222189
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20010101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 3169
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$)
Error: unexpected ')' in "x <- as.ts(ret$)"
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20120101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 402
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$)
Error: unexpected ')' in "x <- as.ts(ret$)"
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20120101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 402
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20120101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 402
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit,h=20)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
> f2<-forecast(fit2)
> plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
> f2<-forecast(fit2,h=200)
> plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 152
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$Close)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20130101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 152
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
Error in nnet.default(x, y, ...) : no weights to fit
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20090808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 404
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
Error in nnet.default(x, y, ...) : no weights to fit
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20080808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 153
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> #fit <- auto.arima(x)
> #f<-forecast(fit,h=20)
> #plot(f)
> 
> fit1 <- bats(x)
> f1<-forecast(fit1)
> plot(f1)
> 
> fit2 <- nnetar(x)
Error in nnet.default(x, y, ...) : no weights to fit
> f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20080808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 153
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20090808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 404
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
Warning message:
In auto.arima(x) :
  Unable to fit final model using maximum likelihood. AIC value approximated
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20090808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 404
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
Warning message:
In auto.arima(x) :
  Unable to fit final model using maximum likelihood. AIC value approximated
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20130808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 1411
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20080808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 153
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20090808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 404
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
Warning message:
In auto.arima(x) :
  Unable to fit final model using maximum likelihood. AIC value approximated
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20100808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 655
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20100808 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 402
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20080101, 20080303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 42
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> 
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> index <- start + winsize
> window <- ret$daily.returns[start : index,]
Error in ret$daily.returns[start:index, ] : 
  incorrect number of dimensions
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> index <- start + winsize
> window <- ret$daily.returns[1 : 30,]
Error in ret$daily.returns[1:30, ] : incorrect number of dimensions
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> index <- start + winsize
> window <- ret$daily.returns[c(1:30),]
Error in ret$daily.returns[c(1:30), ] : incorrect number of dimensions
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> index <- start + winsize
> window <- ret$daily.returns[1:30,]
Error in ret$daily.returns[1:30, ] : incorrect number of dimensions
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> 
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(ret$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=20)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow()
Error in nrow() : argument "x" is missing, with no default
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> f$lower
           80%       95%
[1,] -3.340648 -5.260685
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f$lower,f$upper,f$mean)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f.lower,f$upper,f$mean)
Error in cbind(f.lower, f$upper, f$mean) : object 'f.lower' not found
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f$lower[1,],f$upper[1,],f$mean[1])
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f$lower[1,],f$upper[1,],f$mean)
Error in .cbind.ts(list(...), .makeNamesTs(...), dframe = FALSE, union = TRUE) : 
  non-time series not of the correct length
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f$lower[1,],f$upper[1,],f$mean[1])
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> 
> index <- start + winsize
> window <- ret[1:30,]
> x <- as.ts(window$daily.returns)
> fit <- auto.arima(x)
> f<-forecast(fit,h=1)
> plot(f)
> 
> predictedrange <- cbind(f$lower,f$upper,f$mean)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> for(i in 1:nrow(ret))
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	pred[index,] <- cbind(f$lower,f$upper,f$mean)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
Error in pred[index, ] <- cbind(f$lower, f$upper, f$mean) : 
  incorrect number of subscripts on matrix
> #plot(f)
> 
> predictedrange <- cbind(f$lower,f$upper,f$mean)
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> for(i in 1:nrow(ret))
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	
+ 	predictedrange <- cbind(f$lower,f$upper,f$mean)
+ 	pred[index,] <- rbind(predictedrange)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
Error in pred[index, ] <- rbind(predictedrange) : 
  incorrect number of subscripts on matrix
> #plot(f)
> 
> 
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> for(i in 1:nrow(ret))
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	
+ 	predictedrange <- cbind(f$lower,f$upper,f$mean)
+ 	pred<- rbind(predictedrange)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
> #plot(f)
> 
> 
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
> # TODO: Add comment
> # 
> # Author: ajinkyaingale
> ###############################################################################
> library(randomForest)
> library(TTR)
> library(forecast)
> library(quantmod)
> 
> source("/Users/ajinkyaingale/Software Engineering/MastersProjectdocuments/Code/system/analysis/technical/cran/trunk/srs-cran/src/technicalindicators/TickerDailyReturnAbsolute.R")
> 
> gas<-gas
> 
> 
> 
> d <- getYahooData("IBM", 20090101, 20090303 ,freq="daily", type="price", adjust=TRUE, quiet=FALSE)
> winsize <- 30
> 
> ret <- getPeriodReturnSignals(d, "daily", 2)
[1] 2
[1] " calculating daily returns "
[1] " calculated percent daily returns "
[1] " ticker.return.signals"
NULL
[1] " calculating daily return signals "
[1] " ticker "
[1] 41
[1] " ticker.return.signals "
NULL
[1] " ticker.return.factors "
NULL
> start<- 1
> end <- nrow(ret)
> pred <- nrow(ret)
> 
> for(i in 1:nrow(ret))
+ {
+ 	index <- start + winsize
+ 	window <- ret[start:index,]
+ 	x <- as.ts(window$daily.returns)
+ 	fit <- auto.arima(x)
+ 	f <- forecast(fit,h=1)
+ 	
+ 	predictedrange <- cbind(f$lower,f$upper,f$mean)
+ 	pred<- rbind(pred,predictedrange)
+ 	
+ 	start <- start + 1
+ 	index <- index + 1
+ }
> #plot(f)
> 
> 
> 
> #fit1 <- bats(x)
> #f1<-forecast(fit1)
> #plot(f1)
> 
> #fit2 <- nnetar(x)
> #f2<-forecast(fit2,h=200)
> #plot(f2)
